/*
 * $Id: DdsDcpsInfoUtils.idl 5684 2012-06-12 21:41:47Z mitza $
 *
 *
 * Distributed under the OpenDDS License.
 * See: http://www.opendds.org/license.html
 */

#ifndef OPENDDS_DCPS_INFO_UTILS_IDL
#define OPENDDS_DCPS_INFO_UTILS_IDL
#include "dds/DdsDcpsInfrastructure.idl"
#include "dds/DdsDcpsGuid.idl"
#include "tao/OctetSeq.pidl"

module OpenDDS
{
  module DCPS
  {
    // These are unique across a domain
    // They are also the InstanceHandle_t in Sample_Info for built-in Topics
    typedef GUID_t RepoId;

    typedef CORBA::OctetSeq TransportBLOB;

    struct TransportLocator {
      /// The transport type (e.g. tcp or udp)
      string transport_type;
      /// Information about the transport instance that is opaque to all but
      /// code specific to that transport implementation.
      TransportBLOB data;
    };

    typedef sequence<TransportLocator> TransportLocatorSeq;

    struct IncompatibleQosStatus {
      long total_count;
      long count_since_last_send;
      DDS::QosPolicyId_t last_policy_id;
      DDS::QosPolicyCountSeq policies;
    };

    // Information returned from call to add_domain_participant()
    struct AddDomainStatus {
      RepoId  id;
      boolean federated;
    };

    // Status returned by a topic operation
    enum TopicStatus {
      CREATED,
      ENABLED,
      FOUND,
      NOT_FOUND,
      REMOVED,
      CONFLICTING_TYPENAME,
      PRECONDITION_NOT_MET,
      INTERNAL_ERROR
    };

    struct WriterAssociation {
      TransportLocatorSeq writerTransInfo;
      RepoId writerId;
      ::DDS::PublisherQos pubQos;
      ::DDS::DataWriterQos writerQos;
    };

    struct ReaderAssociation {
      TransportLocatorSeq readerTransInfo;
      RepoId readerId;
      ::DDS::SubscriberQos subQos;
      ::DDS::DataReaderQos readerQos;
      string filterExpression;
      ::DDS::StringSeq exprParams;
    };

    typedef sequence<RepoId> WriterIdSeq;

    typedef sequence<RepoId> ReaderIdSeq;

  }; // module DDS
}; // module OpenDDS

#endif /* OPENDDS_DCPS_INFO_UTILS_IDL */
