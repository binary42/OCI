// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376

#include "DCPS/DdsDcps_pch.h"
#include "DdsDcpsPublicationC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DdsDcpsPublicationC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::DataWriterListener.

DDS::DataWriterListener_ptr
TAO::Objref_Traits<DDS::DataWriterListener>::duplicate (
    DDS::DataWriterListener_ptr p)
{
  return DDS::DataWriterListener::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::DataWriterListener>::release (
    DDS::DataWriterListener_ptr p)
{
  ::CORBA::release (p);
}

DDS::DataWriterListener_ptr
TAO::Objref_Traits<DDS::DataWriterListener>::nil (void)
{
  return DDS::DataWriterListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::DataWriterListener>::marshal (
    const DDS::DataWriterListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::DataWriterListener::DataWriterListener (void)
{}

DDS::DataWriterListener::~DataWriterListener (void)
{
}

DDS::DataWriterListener_ptr
DDS::DataWriterListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriterListener::_duplicate (
      dynamic_cast<DataWriterListener_ptr> (_tao_objref)
    );
}

DDS::DataWriterListener_ptr
DDS::DataWriterListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriterListener::_duplicate (
      dynamic_cast<DataWriterListener_ptr> (_tao_objref)
    );
}

DDS::DataWriterListener_ptr
DDS::DataWriterListener::_nil (void)
{
  return 0;
}

DDS::DataWriterListener_ptr
DDS::DataWriterListener::_duplicate (DataWriterListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::DataWriterListener::_tao_release (DataWriterListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::DataWriterListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriterListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::DataWriterListener::_interface_repository_id (void) const
{
  return "IDL:DDS/DataWriterListener:1.0";
}

::CORBA::Boolean
DDS::DataWriterListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::PublisherListener.

DDS::PublisherListener_ptr
TAO::Objref_Traits<DDS::PublisherListener>::duplicate (
    DDS::PublisherListener_ptr p)
{
  return DDS::PublisherListener::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::PublisherListener>::release (
    DDS::PublisherListener_ptr p)
{
  ::CORBA::release (p);
}

DDS::PublisherListener_ptr
TAO::Objref_Traits<DDS::PublisherListener>::nil (void)
{
  return DDS::PublisherListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::PublisherListener>::marshal (
    const DDS::PublisherListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::PublisherListener::PublisherListener (void)
{}

DDS::PublisherListener::~PublisherListener (void)
{
}

DDS::PublisherListener_ptr
DDS::PublisherListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PublisherListener::_duplicate (
      dynamic_cast<PublisherListener_ptr> (_tao_objref)
    );
}

DDS::PublisherListener_ptr
DDS::PublisherListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return PublisherListener::_duplicate (
      dynamic_cast<PublisherListener_ptr> (_tao_objref)
    );
}

DDS::PublisherListener_ptr
DDS::PublisherListener::_nil (void)
{
  return 0;
}

DDS::PublisherListener_ptr
DDS::PublisherListener::_duplicate (PublisherListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::PublisherListener::_tao_release (PublisherListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::PublisherListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriterListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/PublisherListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::PublisherListener::_interface_repository_id (void) const
{
  return "IDL:DDS/PublisherListener:1.0";
}

::CORBA::Boolean
DDS::PublisherListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::DataWriter.

DDS::DataWriter_ptr
TAO::Objref_Traits<DDS::DataWriter>::duplicate (
    DDS::DataWriter_ptr p)
{
  return DDS::DataWriter::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::DataWriter>::release (
    DDS::DataWriter_ptr p)
{
  ::CORBA::release (p);
}

DDS::DataWriter_ptr
TAO::Objref_Traits<DDS::DataWriter>::nil (void)
{
  return DDS::DataWriter::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::DataWriter>::marshal (
    const DDS::DataWriter_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::DataWriter::DataWriter (void)
{}

DDS::DataWriter::~DataWriter (void)
{
}

DDS::DataWriter_ptr
DDS::DataWriter::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriter::_duplicate (
      dynamic_cast<DataWriter_ptr> (_tao_objref)
    );
}

DDS::DataWriter_ptr
DDS::DataWriter::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriter::_duplicate (
      dynamic_cast<DataWriter_ptr> (_tao_objref)
    );
}

DDS::DataWriter_ptr
DDS::DataWriter::_nil (void)
{
  return 0;
}

DDS::DataWriter_ptr
DDS::DataWriter::_duplicate (DataWriter_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::DataWriter::_tao_release (DataWriter_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::DataWriter::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriter:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::DataWriter::_interface_repository_id (void) const
{
  return "IDL:DDS/DataWriter:1.0";
}

::CORBA::Boolean
DDS::DataWriter::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::Publisher.

DDS::Publisher_ptr
TAO::Objref_Traits<DDS::Publisher>::duplicate (
    DDS::Publisher_ptr p)
{
  return DDS::Publisher::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::Publisher>::release (
    DDS::Publisher_ptr p)
{
  ::CORBA::release (p);
}

DDS::Publisher_ptr
TAO::Objref_Traits<DDS::Publisher>::nil (void)
{
  return DDS::Publisher::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::Publisher>::marshal (
    const DDS::Publisher_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::Publisher::Publisher (void)
{}

DDS::Publisher::~Publisher (void)
{
}

DDS::Publisher_ptr
DDS::Publisher::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Publisher::_duplicate (
      dynamic_cast<Publisher_ptr> (_tao_objref)
    );
}

DDS::Publisher_ptr
DDS::Publisher::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Publisher::_duplicate (
      dynamic_cast<Publisher_ptr> (_tao_objref)
    );
}

DDS::Publisher_ptr
DDS::Publisher::_nil (void)
{
  return 0;
}

DDS::Publisher_ptr
DDS::Publisher::_duplicate (Publisher_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::Publisher::_tao_release (Publisher_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::Publisher::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Publisher:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::Publisher::_interface_repository_id (void) const
{
  return "IDL:DDS/Publisher:1.0";
}

::CORBA::Boolean
DDS::Publisher::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for OpenDDS::DCPS::DataWriterListener.

OpenDDS::DCPS::DataWriterListener_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataWriterListener>::duplicate (
    OpenDDS::DCPS::DataWriterListener_ptr p)
{
  return OpenDDS::DCPS::DataWriterListener::_duplicate (p);
}

void
TAO::Objref_Traits<OpenDDS::DCPS::DataWriterListener>::release (
    OpenDDS::DCPS::DataWriterListener_ptr p)
{
  ::CORBA::release (p);
}

OpenDDS::DCPS::DataWriterListener_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataWriterListener>::nil (void)
{
  return OpenDDS::DCPS::DataWriterListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OpenDDS::DCPS::DataWriterListener>::marshal (
    const OpenDDS::DCPS::DataWriterListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

OpenDDS::DCPS::DataWriterListener::DataWriterListener (void)
{}

OpenDDS::DCPS::DataWriterListener::~DataWriterListener (void)
{
}

OpenDDS::DCPS::DataWriterListener_ptr
OpenDDS::DCPS::DataWriterListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriterListener::_duplicate (
      dynamic_cast<DataWriterListener_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataWriterListener_ptr
OpenDDS::DCPS::DataWriterListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataWriterListener::_duplicate (
      dynamic_cast<DataWriterListener_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataWriterListener_ptr
OpenDDS::DCPS::DataWriterListener::_nil (void)
{
  return 0;
}

OpenDDS::DCPS::DataWriterListener_ptr
OpenDDS::DCPS::DataWriterListener::_duplicate (DataWriterListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OpenDDS::DCPS::DataWriterListener::_tao_release (DataWriterListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OpenDDS::DCPS::DataWriterListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataWriterListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataWriterListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OpenDDS::DCPS::DataWriterListener::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/DataWriterListener:1.0";
}

::CORBA::Boolean
OpenDDS::DCPS::DataWriterListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::PublicationLostStatus &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.subscription_handles);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::PublicationLostStatus &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.subscription_handles);
}

TAO_END_VERSIONED_NAMESPACE_DECL



