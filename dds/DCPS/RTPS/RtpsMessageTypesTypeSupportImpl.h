/* -*- C++ -*- */
/* Generated by ../../../bin/opendds_idl version 3.6 (ACE version 6.2a_p7) running on input file RtpsMessageTypes.idl*/
#ifndef OPENDDS_IDL_GENERATED_RTPSMESSAGETYPESTYPESUPPORTIMPL_H_PECSZQ
#define OPENDDS_IDL_GENERATED_RTPSMESSAGETYPESTYPESUPPORTIMPL_H_PECSZQ
#include "dds/DCPS/Definitions.h"
#include "RtpsMessageTypesC.h"
#include "../../DdsDcpsInfoUtilsC.h"
#include "../../DdsDcpsInfrastructureC.h"
#include "RtpsBaseMessageTypesC.h"
#include "dds/DCPS/Serializer.h"
#include "rtps_export.h"


/* Begin MODULE: OpenDDS */



/* Begin MODULE: RTPS */



/* Begin TYPEDEF: LongSeq8 */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LongSeq8& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LongSeq8& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LongSeq8& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::LongSeq8*);

}  }

#endif

/* End TYPEDEF: LongSeq8 */


/* Begin STRUCT: SequenceNumberSet */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SequenceNumberSet& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SequenceNumberSet& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SequenceNumberSet& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SequenceNumberSet>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::SequenceNumberSet*);

}  }

#endif

/* End STRUCT: SequenceNumberSet */


/* Begin STRUCT: FragmentNumberSet */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FragmentNumberSet& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FragmentNumberSet& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FragmentNumberSet& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::FragmentNumberSet>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::FragmentNumberSet*);

}  }

#endif

/* End STRUCT: FragmentNumberSet */


/* Begin TYPEDEF: LocatorList */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LocatorList& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LocatorList& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LocatorList& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::LocatorList*);

}  }

#endif

/* End TYPEDEF: LocatorList */


/* Begin STRUCT: Header */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Header& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Header& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Header& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Header>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Header*);

}  }

#endif

/* End STRUCT: Header */


/* Begin STRUCT: SubmessageHeader */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SubmessageHeader& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageHeader& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageHeader& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SubmessageHeader>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::SubmessageHeader*);

}  }

#endif

/* End STRUCT: SubmessageHeader */


/* Begin STRUCT: AckNackSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::AckNackSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::AckNackSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::AckNackSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::AckNackSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::AckNackSubmessage*);

}  }

#endif

/* End STRUCT: AckNackSubmessage */


/* Begin STRUCT: DataSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DataSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DataSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DataSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DataSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::DataSubmessage*);

}  }

#endif

/* End STRUCT: DataSubmessage */


/* Begin STRUCT: DataFragSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DataFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DataFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DataFragSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DataFragSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::DataFragSubmessage*);

}  }

#endif

/* End STRUCT: DataFragSubmessage */


/* Begin STRUCT: GapSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::GapSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::GapSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::GapSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::GapSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::GapSubmessage*);

}  }

#endif

/* End STRUCT: GapSubmessage */


/* Begin STRUCT: HeartBeatSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::HeartBeatSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::HeartBeatSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::HeartBeatSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::HeartBeatSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::HeartBeatSubmessage*);

}  }

#endif

/* End STRUCT: HeartBeatSubmessage */


/* Begin STRUCT: HeartBeatFragSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::HeartBeatFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::HeartBeatFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::HeartBeatFragSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::HeartBeatFragSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::HeartBeatFragSubmessage*);

}  }

#endif

/* End STRUCT: HeartBeatFragSubmessage */


/* Begin STRUCT: InfoDestinationSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoDestinationSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoDestinationSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoDestinationSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoDestinationSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoDestinationSubmessage*);

}  }

#endif

/* End STRUCT: InfoDestinationSubmessage */


/* Begin STRUCT: InfoReplySubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoReplySubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoReplySubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoReplySubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoReplySubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoReplySubmessage*);

}  }

#endif

/* End STRUCT: InfoReplySubmessage */


/* Begin STRUCT: InfoSourceSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoSourceSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoSourceSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoSourceSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoSourceSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoSourceSubmessage*);

}  }

#endif

/* End STRUCT: InfoSourceSubmessage */


/* Begin STRUCT: InfoTimestampSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoTimestampSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoTimestampSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoTimestampSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoTimestampSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoTimestampSubmessage*);

}  }

#endif

/* End STRUCT: InfoTimestampSubmessage */


/* Begin STRUCT: PadSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::PadSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::PadSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::PadSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::PadSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::PadSubmessage*);

}  }

#endif

/* End STRUCT: PadSubmessage */


/* Begin STRUCT: NackFragSubmessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::NackFragSubmessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::NackFragSubmessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::NackFragSubmessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::NackFragSubmessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::NackFragSubmessage*);

}  }

#endif

/* End STRUCT: NackFragSubmessage */


/* Begin STRUCT: InfoReplyIp4Submessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::InfoReplyIp4Submessage& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::InfoReplyIp4Submessage& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::InfoReplyIp4Submessage& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::InfoReplyIp4Submessage>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::InfoReplyIp4Submessage*);

}  }

#endif

/* End STRUCT: InfoReplyIp4Submessage */


/* Begin ENUM: SubmessageKind */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageKind& enumval);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageKind& enumval);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

extern const char* gen_OpenDDS_RTPS_SubmessageKind_names[];
}  }

#endif

/* End ENUM: SubmessageKind */


/* Begin UNION: Submessage */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Submessage& uni, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Submessage& uni);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Submessage& uni);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Submessage*);

}  }

#endif

/* End UNION: Submessage */


/* Begin TYPEDEF: SubmessageSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SubmessageSeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SubmessageSeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SubmessageSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::SubmessageSeq*);

}  }

#endif

/* End TYPEDEF: SubmessageSeq */


/* Begin STRUCT: ParticipantMessageData */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParticipantMessageData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParticipantMessageData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParticipantMessageData& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ParticipantMessageData>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParticipantMessageData*);

}  }

#endif

/* End STRUCT: ParticipantMessageData */


/* Begin TYPEDEF: LocatorSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LocatorSeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LocatorSeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LocatorSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::LocatorSeq*);

}  }

#endif

/* End TYPEDEF: LocatorSeq */


/* Begin STRUCT: ParticipantProxy_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParticipantProxy_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParticipantProxy_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParticipantProxy_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ParticipantProxy_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParticipantProxy_t*);

}  }

#endif

/* End STRUCT: ParticipantProxy_t */


/* Begin STRUCT: SPDPdiscoveredParticipantData */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SPDPdiscoveredParticipantData& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SPDPdiscoveredParticipantData>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::SPDPdiscoveredParticipantData*);

}  }

#endif

/* End STRUCT: SPDPdiscoveredParticipantData */


/* Begin STRUCT: WriterProxy_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::WriterProxy_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::WriterProxy_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::WriterProxy_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::WriterProxy_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::WriterProxy_t*);

}  }

#endif

/* End STRUCT: WriterProxy_t */


/* Begin STRUCT: DiscoveredWriterData */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DiscoveredWriterData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DiscoveredWriterData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DiscoveredWriterData& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DiscoveredWriterData>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::DiscoveredWriterData*);

}  }

#endif

/* End STRUCT: DiscoveredWriterData */


/* Begin STRUCT: ReaderProxy_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ReaderProxy_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ReaderProxy_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ReaderProxy_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ReaderProxy_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ReaderProxy_t*);

}  }

#endif

/* End STRUCT: ReaderProxy_t */


/* Begin STRUCT: DiscoveredReaderData */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DiscoveredReaderData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DiscoveredReaderData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DiscoveredReaderData& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DiscoveredReaderData>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::DiscoveredReaderData*);

}  }

#endif

/* End STRUCT: DiscoveredReaderData */


/* Begin STRUCT: DiscoveredTopicData */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::DiscoveredTopicData& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::DiscoveredTopicData& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::DiscoveredTopicData& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::DiscoveredTopicData>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::DiscoveredTopicData*);

}  }

#endif

/* End STRUCT: DiscoveredTopicData */

/* End MODULE: RTPS */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_RTPSMESSAGETYPESTYPESUPPORTIMPL_H_PECSZQ */
