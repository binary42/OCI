/* -*- C++ -*- */
/* Generated by ../../../bin/opendds_idl version 3.6 (ACE version 6.2a_p7) running on input file RtpsBaseMessageTypes.idl*/
#ifndef OPENDDS_IDL_GENERATED_RTPSBASEMESSAGETYPESTYPESUPPORTIMPL_H_7IXMGF
#define OPENDDS_IDL_GENERATED_RTPSBASEMESSAGETYPESTYPESUPPORTIMPL_H_7IXMGF
#include "dds/DCPS/Definitions.h"
#include "RtpsBaseMessageTypesC.h"
#include "../../DdsDcpsGuidC.h"
#include "../../DdsDcpsInfoUtilsC.h"
#include "../../DdsDcpsInfrastructureC.h"
#include "dds/DCPS/Serializer.h"
#include "rtps_export.h"


/* Begin MODULE: OpenDDS */



/* Begin MODULE: RTPS */



/* Begin TYPEDEF: GuidPrefix_t */


/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityId_t */


/* End TYPEDEF: EntityId_t */


/* Begin TYPEDEF: GUID_t */


/* End TYPEDEF: GUID_t */


/* Begin TYPEDEF: GUIDSeq */


/* End TYPEDEF: GUIDSeq */


/* Begin TYPEDEF: OctetSeq */


/* End TYPEDEF: OctetSeq */


/* Begin TYPEDEF: StringSeq */


/* End TYPEDEF: StringSeq */


/* Begin STRUCT: Time_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Time_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Time_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Time_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Time_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Time_t*);

}  }

#endif

/* End STRUCT: Time_t */


/* Begin TYPEDEF: Timestamp_t */


/* End TYPEDEF: Timestamp_t */


/* Begin TYPEDEF: Duration_t */


/* End TYPEDEF: Duration_t */


/* Begin TYPEDEF: OctetArray2 */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OctetArray2_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OctetArray2_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OctetArray2_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::OctetArray2_forany*);

}  }

#endif

/* End TYPEDEF: OctetArray2 */


/* Begin STRUCT: VendorId_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::VendorId_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::VendorId_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::VendorId_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::VendorId_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::VendorId_t*);

}  }

#endif

/* End STRUCT: VendorId_t */


/* Begin STRUCT: SequenceNumber_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::SequenceNumber_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::SequenceNumber_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::SequenceNumber_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::SequenceNumber_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::SequenceNumber_t*);

}  }

#endif

/* End STRUCT: SequenceNumber_t */


/* Begin STRUCT: FragmentNumber_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FragmentNumber_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FragmentNumber_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FragmentNumber_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::FragmentNumber_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::FragmentNumber_t*);

}  }

#endif

/* End STRUCT: FragmentNumber_t */


/* Begin TYPEDEF: OctetArray16 */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OctetArray16_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OctetArray16_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OctetArray16_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::OctetArray16_forany*);

}  }

#endif

/* End TYPEDEF: OctetArray16 */


/* Begin STRUCT: Locator_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Locator_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Locator_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Locator_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Locator_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Locator_t*);

}  }

#endif

/* End STRUCT: Locator_t */


/* Begin CONST: LOCATOR_KIND_INVALID */


/* End CONST: LOCATOR_KIND_INVALID */


/* Begin CONST: LOCATOR_KIND_RESERVED */


/* End CONST: LOCATOR_KIND_RESERVED */


/* Begin CONST: LOCATOR_KIND_UDPv4 */


/* End CONST: LOCATOR_KIND_UDPv4 */


/* Begin CONST: LOCATOR_KIND_UDPv6 */


/* End CONST: LOCATOR_KIND_UDPv6 */


/* Begin CONST: LOCATOR_PORT_INVALID */


/* End CONST: LOCATOR_PORT_INVALID */


/* Begin STRUCT: LocatorUDPv4_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::LocatorUDPv4_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::LocatorUDPv4_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::LocatorUDPv4_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::LocatorUDPv4_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::LocatorUDPv4_t*);

}  }

#endif

/* End STRUCT: LocatorUDPv4_t */


/* Begin STRUCT: TopicKind_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::TopicKind_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::TopicKind_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::TopicKind_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::TopicKind_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::TopicKind_t*);

}  }

#endif

/* End STRUCT: TopicKind_t */


/* Begin CONST: NO_KEY */


/* End CONST: NO_KEY */


/* Begin CONST: WITH_KEY */


/* End CONST: WITH_KEY */


/* Begin STRUCT: ReliabilityKind_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ReliabilityKind_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ReliabilityKind_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ReliabilityKind_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ReliabilityKind_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ReliabilityKind_t*);

}  }

#endif

/* End STRUCT: ReliabilityKind_t */


/* Begin CONST: BEST_EFFORT */


/* End CONST: BEST_EFFORT */


/* Begin CONST: RELIABLE */


/* End CONST: RELIABLE */


/* Begin STRUCT: Count_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Count_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Count_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Count_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Count_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Count_t*);

}  }

#endif

/* End STRUCT: Count_t */


/* Begin STRUCT: ProtocolVersion_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ProtocolVersion_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ProtocolVersion_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ProtocolVersion_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ProtocolVersion_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ProtocolVersion_t*);

}  }

#endif

/* End STRUCT: ProtocolVersion_t */


/* Begin STRUCT: KeyHash_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::KeyHash_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::KeyHash_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::KeyHash_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::KeyHash_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::KeyHash_t*);

}  }

#endif

/* End STRUCT: KeyHash_t */


/* Begin TYPEDEF: OctetArray4 */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OctetArray4_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OctetArray4_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OctetArray4_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::OctetArray4_forany*);

}  }

#endif

/* End TYPEDEF: OctetArray4 */


/* Begin STRUCT: StatusInfo_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::StatusInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::StatusInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::StatusInfo_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::StatusInfo_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::StatusInfo_t*);

}  }

#endif

/* End STRUCT: StatusInfo_t */


/* Begin TYPEDEF: String256 */


/* End TYPEDEF: String256 */


/* Begin STRUCT: ContentFilterProperty_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ContentFilterProperty_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ContentFilterProperty_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ContentFilterProperty_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ContentFilterProperty_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ContentFilterProperty_t*);

}  }

#endif

/* End STRUCT: ContentFilterProperty_t */


/* Begin TYPEDEF: FilterResult_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterResult_t& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterResult_t& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterResult_t& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterResult_t*);

}  }

#endif

/* End TYPEDEF: FilterResult_t */


/* Begin TYPEDEF: FilterSignature_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterSignature_t_forany& arr, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterSignature_t_forany& arr);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterSignature_t_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterSignature_t_forany*);

}  }

#endif

/* End TYPEDEF: FilterSignature_t */


/* Begin TYPEDEF: FilterSignatureSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::FilterSignatureSeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::FilterSignatureSeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::FilterSignatureSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::FilterSignatureSeq*);

}  }

#endif

/* End TYPEDEF: FilterSignatureSeq */


/* Begin STRUCT: ContentFilterInfo_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ContentFilterInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ContentFilterInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ContentFilterInfo_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::ContentFilterInfo_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ContentFilterInfo_t*);

}  }

#endif

/* End STRUCT: ContentFilterInfo_t */


/* Begin STRUCT: Property_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Property_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::Property_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::Property_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::Property_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Property_t*);

}  }

#endif

/* End STRUCT: Property_t */


/* Begin TYPEDEF: PropertySeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::PropertySeq& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::PropertySeq& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::PropertySeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::PropertySeq*);

}  }

#endif

/* End TYPEDEF: PropertySeq */


/* Begin STRUCT: EntityName_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::EntityName_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::EntityName_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::EntityName_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::EntityName_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::EntityName_t*);

}  }

#endif

/* End STRUCT: EntityName_t */


/* Begin TYPEDEF: BuiltinEndpointSet_t */


/* End TYPEDEF: BuiltinEndpointSet_t */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PUBLICATION_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_SUBSCRIPTION_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_PROXY_DETECTOR */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_ANNOUNCER */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_ANNOUNCER */


/* Begin CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_DETECTOR */


/* End CONST: DISC_BUILTIN_ENDPOINT_PARTICIPANT_STATE_DETECTOR */


/* Begin CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_WRITER */


/* End CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_WRITER */


/* Begin CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_READER */


/* End CONST: BUILTIN_ENDPOINT_PARTICIPANT_MESSAGE_DATA_READER */


/* Begin TYPEDEF: ParameterList */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::ParameterList& seq, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::ParameterList& seq);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::ParameterList& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::ParameterList*);

}  }

#endif

/* End TYPEDEF: ParameterList */


/* Begin STRUCT: OriginalWriterInfo_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::OriginalWriterInfo_t& stru, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& strm, const OpenDDS::RTPS::OriginalWriterInfo_t& stru);

OpenDDS_Rtps_Export
bool operator>>(Serializer& strm, OpenDDS::RTPS::OriginalWriterInfo_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Rtps_Export
const MetaStruct& getMetaStruct<OpenDDS::RTPS::OriginalWriterInfo_t>();
OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::OriginalWriterInfo_t*);

}  }

#endif

/* End STRUCT: OriginalWriterInfo_t */


/* Begin TYPEDEF: ParameterId_t */


/* End TYPEDEF: ParameterId_t */


/* Begin CONST: PID_PAD */


/* End CONST: PID_PAD */


/* Begin CONST: PID_SENTINEL */


/* End CONST: PID_SENTINEL */


/* Begin CONST: PID_USER_DATA */


/* End CONST: PID_USER_DATA */


/* Begin CONST: PID_TOPIC_NAME */


/* End CONST: PID_TOPIC_NAME */


/* Begin CONST: PID_TYPE_NAME */


/* End CONST: PID_TYPE_NAME */


/* Begin CONST: PID_GROUP_DATA */


/* End CONST: PID_GROUP_DATA */


/* Begin CONST: PID_TOPIC_DATA */


/* End CONST: PID_TOPIC_DATA */


/* Begin CONST: PID_DURABILITY */


/* End CONST: PID_DURABILITY */


/* Begin CONST: PID_DURABILITY_SERVICE */


/* End CONST: PID_DURABILITY_SERVICE */


/* Begin CONST: PID_DEADLINE */


/* End CONST: PID_DEADLINE */


/* Begin CONST: PID_LATENCY_BUDGET */


/* End CONST: PID_LATENCY_BUDGET */


/* Begin CONST: PID_LIVELINESS */


/* End CONST: PID_LIVELINESS */


/* Begin CONST: PID_RELIABILITY */


/* End CONST: PID_RELIABILITY */


/* Begin CONST: PID_LIFESPAN */


/* End CONST: PID_LIFESPAN */


/* Begin CONST: PID_DESTINATION_ORDER */


/* End CONST: PID_DESTINATION_ORDER */


/* Begin CONST: PID_HISTORY */


/* End CONST: PID_HISTORY */


/* Begin CONST: PID_RESOURCE_LIMITS */


/* End CONST: PID_RESOURCE_LIMITS */


/* Begin CONST: PID_OWNERSHIP */


/* End CONST: PID_OWNERSHIP */


/* Begin CONST: PID_OWNERSHIP_STRENGTH */


/* End CONST: PID_OWNERSHIP_STRENGTH */


/* Begin CONST: PID_PRESENTATION */


/* End CONST: PID_PRESENTATION */


/* Begin CONST: PID_PARTITION */


/* End CONST: PID_PARTITION */


/* Begin CONST: PID_TIME_BASED_FILTER */


/* End CONST: PID_TIME_BASED_FILTER */


/* Begin CONST: PID_TRANSPORT_PRIORITY */


/* End CONST: PID_TRANSPORT_PRIORITY */


/* Begin CONST: PID_PROTOCOL_VERSION */


/* End CONST: PID_PROTOCOL_VERSION */


/* Begin CONST: PID_VENDORID */


/* End CONST: PID_VENDORID */


/* Begin CONST: PID_UNICAST_LOCATOR */


/* End CONST: PID_UNICAST_LOCATOR */


/* Begin CONST: PID_MULTICAST_LOCATOR */


/* End CONST: PID_MULTICAST_LOCATOR */


/* Begin CONST: PID_MULTICAST_IPADDRESS */


/* End CONST: PID_MULTICAST_IPADDRESS */


/* Begin CONST: PID_DEFAULT_UNICAST_LOCATOR */


/* End CONST: PID_DEFAULT_UNICAST_LOCATOR */


/* Begin CONST: PID_DEFAULT_MULTICAST_LOCATOR */


/* End CONST: PID_DEFAULT_MULTICAST_LOCATOR */


/* Begin CONST: PID_METATRAFFIC_UNICAST_LOCATOR */


/* End CONST: PID_METATRAFFIC_UNICAST_LOCATOR */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_LOCATOR */


/* End CONST: PID_METATRAFFIC_MULTICAST_LOCATOR */


/* Begin CONST: PID_DEFAULT_UNICAST_IPADDRESS */


/* End CONST: PID_DEFAULT_UNICAST_IPADDRESS */


/* Begin CONST: PID_DEFAULT_UNICAST_PORT */


/* End CONST: PID_DEFAULT_UNICAST_PORT */


/* Begin CONST: PID_METATRAFFIC_UNICAST_IPADDRESS */


/* End CONST: PID_METATRAFFIC_UNICAST_IPADDRESS */


/* Begin CONST: PID_METATRAFFIC_UNICAST_PORT */


/* End CONST: PID_METATRAFFIC_UNICAST_PORT */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_IPADDRESS */


/* End CONST: PID_METATRAFFIC_MULTICAST_IPADDRESS */


/* Begin CONST: PID_METATRAFFIC_MULTICAST_PORT */


/* End CONST: PID_METATRAFFIC_MULTICAST_PORT */


/* Begin CONST: PID_EXPECTS_INLINE_QOS */


/* End CONST: PID_EXPECTS_INLINE_QOS */


/* Begin CONST: PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT */


/* End CONST: PID_PARTICIPANT_MANUAL_LIVELINESS_COUNT */


/* Begin CONST: PID_PARTICIPANT_BUILTIN_ENDPOINTS */


/* End CONST: PID_PARTICIPANT_BUILTIN_ENDPOINTS */


/* Begin CONST: PID_PARTICIPANT_LEASE_DURATION */


/* End CONST: PID_PARTICIPANT_LEASE_DURATION */


/* Begin CONST: PID_CONTENT_FILTER_PROPERTY */


/* End CONST: PID_CONTENT_FILTER_PROPERTY */


/* Begin CONST: PID_PARTICIPANT_GUID */


/* End CONST: PID_PARTICIPANT_GUID */


/* Begin CONST: PID_PARTICIPANT_ENTITYID */


/* End CONST: PID_PARTICIPANT_ENTITYID */


/* Begin CONST: PID_GROUP_GUID */


/* End CONST: PID_GROUP_GUID */


/* Begin CONST: PID_GROUP_ENTITYID */


/* End CONST: PID_GROUP_ENTITYID */


/* Begin CONST: PID_BUILTIN_ENDPOINT_SET */


/* End CONST: PID_BUILTIN_ENDPOINT_SET */


/* Begin CONST: PID_PROPERTY_LIST */


/* End CONST: PID_PROPERTY_LIST */


/* Begin CONST: PID_TYPE_MAX_SIZE_SERIALIZED */


/* End CONST: PID_TYPE_MAX_SIZE_SERIALIZED */


/* Begin CONST: PID_ENTITY_NAME */


/* End CONST: PID_ENTITY_NAME */


/* Begin CONST: PID_KEY_HASH */


/* End CONST: PID_KEY_HASH */


/* Begin CONST: PID_STATUS_INFO */


/* End CONST: PID_STATUS_INFO */


/* Begin CONST: PID_ENDPOINT_GUID */


/* End CONST: PID_ENDPOINT_GUID */


/* Begin CONST: PID_CONTENT_FILTER_INFO */


/* End CONST: PID_CONTENT_FILTER_INFO */


/* Begin CONST: PID_COHERENT_SET */


/* End CONST: PID_COHERENT_SET */


/* Begin CONST: PID_DIRECTED_WRITE */


/* End CONST: PID_DIRECTED_WRITE */


/* Begin CONST: PID_ORIGINAL_WRITER_INFO */


/* End CONST: PID_ORIGINAL_WRITER_INFO */


/* Begin CONST: PIDMASK_VENDOR_SPECIFIC */


/* End CONST: PIDMASK_VENDOR_SPECIFIC */


/* Begin CONST: PIDMASK_INCOMPATIBLE */


/* End CONST: PIDMASK_INCOMPATIBLE */


/* Begin CONST: PID_OPENDDS_BASE */


/* End CONST: PID_OPENDDS_BASE */


/* Begin CONST: PID_OPENDDS_LOCATOR */


/* End CONST: PID_OPENDDS_LOCATOR */


/* Begin CONST: PID_OPENDDS_ASSOCIATED_WRITER */


/* End CONST: PID_OPENDDS_ASSOCIATED_WRITER */


/* Begin UNION: Parameter */

namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_find_size(const OpenDDS::RTPS::Parameter& uni, size_t& size, size_t& padding);

OpenDDS_Rtps_Export
bool operator<<(Serializer& outer_strm, const OpenDDS::RTPS::Parameter& uni);

OpenDDS_Rtps_Export
bool insertParamData(Serializer& strm, const OpenDDS::RTPS::Parameter& uni);

OpenDDS_Rtps_Export
bool operator>>(Serializer& outer_strm, OpenDDS::RTPS::Parameter& uni);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Rtps_Export
void gen_skip_over(Serializer& ser, OpenDDS::RTPS::Parameter*);

}  }

#endif

/* End UNION: Parameter */

/* End MODULE: RTPS */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_RTPSBASEMESSAGETYPESTYPESUPPORTIMPL_H_7IXMGF */
