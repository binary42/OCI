# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.OpenDDS_Rtps
#
# $Id: gnu.mpd 2179 2013-05-28 22:16:51Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.OpenDDS_Rtps
DEPENDENCY_FILE  = .depend.OpenDDS_Rtps


LIB_PREFIX      ?= lib

## LIB_CHECKED may be set to empty later on in this file
LIB_UNCHECKED    = $(LIB_PREFIX)OpenDDS_Rtps.$(LIBEXT)
LIB_CHECKED      = $(LIB_UNCHECKED)
LIB_NAME         = $(LIB_PREFIX)OpenDDS_Rtps

## SHLIB may be set to empty later on in this file
SHLIB_UNCHECKED  = $(LIB_PREFIX)OpenDDS_Rtps.$(SOEXT)
SHLIB            = $(SHLIB_UNCHECKED)

TAO_ROOT  ?= $(ACE_ROOT)/TAO

FILES = \
  RtpsBaseMessageTypesTypeSupportImpl.cpp \
  RtpsMessageTypesTypeSupportImpl.cpp \
  RtpsBaseMessageTypesTypeSupportC.cpp \
  RtpsBaseMessageTypesTypeSupportS.cpp \
  RtpsMessageTypesTypeSupportC.cpp \
  RtpsMessageTypesTypeSupportS.cpp \
  RtpsBaseMessageTypesC.cpp \
  RtpsBaseMessageTypesS.cpp \
  RtpsMessageTypesC.cpp \
  RtpsMessageTypesS.cpp \
  md5.cpp \
  GuidGenerator.cpp \
  RtpsDiscovery.cpp \
  ParameterListConverter.cpp \
  Sedp.cpp \
  Spdp.cpp


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
ACE_SHLIBS = -lOpenDDS_Dcps -lTAO_PortableServer -lTAO_AnyTypeCode -lTAO -lACE
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,../../../lib)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU

include $(DDS_ROOT)/rules.dds.GNU

include $(TAO_ROOT)/rules.tao.GNU

GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

ifneq (,$(RC))
RESOURCES += \
  rtps.rc

RC_INCLUDE_FLAG ?= --include-dir=
RCFLAGS = \
        $(RC_INCLUDE_FLAG)$(ACE_ROOT) \
        $(RC_INCLUDE_FLAG)$(TAO_ROOT) \
        $(RC_INCLUDE_FLAG)../../..
endif

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/OpenDDS_Rtps
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

# turn off libcheck if doing a dry run
ifeq ($(findstring n, $(MAKEFLAGS)),n)
  LIBCHECK = 1
else
  # turn off libcheck if keep going was passed too
  ifeq ($(findstring k, $(MAKEFLAGS)),k)
    LIBCHECK = 1
  else
    LIBCHECK ?= $(filter-out $(foreach lib,OpenDDS_Dcps TAO_PortableServer TAO_AnyTypeCode TAO ACE,$(findstring $(lib),$(foreach libpath,. $(if $(ARCH),./$(ARCH)) $(ACE_ROOT)/lib $(if $(ARCH),$(ACE_ROOT)/lib/$(ARCH)) ../../../lib $(if $(ARCH),../../../lib/$(ARCH)) /usr/lib /usr/lib64 $(INSLIB),$(wildcard $(libpath)/$(LIB_PREFIX)$(lib).* $(libpath)/$(lib).lib)))),OpenDDS_Dcps TAO_PortableServer TAO_AnyTypeCode TAO ACE)
    ifeq ($(LIBCHECK),)
      LIBCHECK = 1
    endif
  endif
endif
ifneq ($(LIBCHECK), 1)
  LIB_CHECKED   =
  SHLIB =
  all: lib_warning
endif

LSRC   = $(FILES)

include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.lib.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L. -L$(ACE_ROOT)/lib -L../../../lib
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH)) -L$(ACE_ROOT)/lib $(if $(ARCH),-L$(ACE_ROOT)/lib/$(ARCH)) -L../../../lib $(if $(ARCH),-L../../../lib/$(ARCH))
endif
CPPFLAGS     += -I$(ACE_ROOT) -I$(TAO_ROOT) -I../../..
ifeq ($(shared_libs),1)
  ifneq ($(SHLIB),)
    CPPFLAGS += -DOPENDDS_RTPS_BUILD_DLL
  endif
endif
ifeq ($(static_libs),1)
  CPPFLAGS += -DACE_AS_STATIC_LIBS -DTAO_AS_STATIC_LIBS
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo OpenDDS_Rtps will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += RtpsBaseMessageTypesTypeSupportC.inl RtpsBaseMessageTypesTypeSupportS.h RtpsBaseMessageTypesTypeSupportC.h RtpsBaseMessageTypesTypeSupportC.cpp RtpsBaseMessageTypesTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsBaseMessageTypesTypeSupport.idl" -nt "RtpsBaseMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypesTypeSupport.idl" -nt "RtpsBaseMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypesTypeSupport.idl" -nt "RtpsBaseMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypesTypeSupport.idl" -nt "RtpsBaseMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypesTypeSupport.idl" -nt "RtpsBaseMessageTypesTypeSupportS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesTypeSupportS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsBaseMessageTypesTypeSupportC.inl RtpsBaseMessageTypesTypeSupportS.h RtpsBaseMessageTypesTypeSupportC.h RtpsBaseMessageTypesTypeSupportC.cpp RtpsBaseMessageTypesTypeSupportS.cpp: RtpsBaseMessageTypesTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../.. -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsBaseMessageTypesTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RtpsBaseMessageTypesTypeSupportC.inl RtpsBaseMessageTypesTypeSupportS.h RtpsBaseMessageTypesTypeSupportC.h RtpsBaseMessageTypesTypeSupportC.cpp RtpsBaseMessageTypesTypeSupportS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += RtpsMessageTypesTypeSupportC.inl RtpsMessageTypesTypeSupportS.h RtpsMessageTypesTypeSupportC.h RtpsMessageTypesTypeSupportC.cpp RtpsMessageTypesTypeSupportS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsMessageTypesTypeSupport.idl" -nt "RtpsMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypesTypeSupport.idl" -nt "RtpsMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypesTypeSupport.idl" -nt "RtpsMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypesTypeSupport.idl" -nt "RtpsMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypesTypeSupport.idl" -nt "RtpsMessageTypesTypeSupportS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesTypeSupportS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsMessageTypesTypeSupportC.inl RtpsMessageTypesTypeSupportS.h RtpsMessageTypesTypeSupportC.h RtpsMessageTypesTypeSupportC.cpp RtpsMessageTypesTypeSupportS.cpp: RtpsMessageTypesTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../.. -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsMessageTypesTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RtpsMessageTypesTypeSupportC.inl RtpsMessageTypesTypeSupportS.h RtpsMessageTypesTypeSupportC.h RtpsMessageTypesTypeSupportC.cpp RtpsMessageTypesTypeSupportS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += RtpsBaseMessageTypesC.inl RtpsBaseMessageTypesS.h RtpsBaseMessageTypesC.h RtpsBaseMessageTypesC.cpp RtpsBaseMessageTypesS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsBaseMessageTypesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsBaseMessageTypesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsBaseMessageTypesS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsBaseMessageTypesC.inl RtpsBaseMessageTypesS.h RtpsBaseMessageTypesC.h RtpsBaseMessageTypesC.cpp RtpsBaseMessageTypesS.cpp: RtpsBaseMessageTypes.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../.. -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsBaseMessageTypes.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RtpsBaseMessageTypesC.inl RtpsBaseMessageTypesS.h RtpsBaseMessageTypesC.h RtpsBaseMessageTypesC.cpp RtpsBaseMessageTypesS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += RtpsMessageTypesC.inl RtpsMessageTypesS.h RtpsMessageTypesC.h RtpsMessageTypesC.cpp RtpsMessageTypesS.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesS.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "RtpsMessageTypesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "RtpsMessageTypesS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "RtpsMessageTypesS.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsMessageTypesC.inl RtpsMessageTypesS.h RtpsMessageTypesC.h RtpsMessageTypesC.cpp RtpsMessageTypesS.cpp: RtpsMessageTypes.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Sa -St -I../../.. -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsMessageTypes.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
RtpsMessageTypesC.inl RtpsMessageTypesS.h RtpsMessageTypesC.h RtpsMessageTypesC.cpp RtpsMessageTypesS.cpp: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += RtpsBaseMessageTypesTypeSupport.idl RtpsBaseMessageTypesTypeSupportImpl.h RtpsBaseMessageTypesTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "RtpsBaseMessageTypes.idl" -nt "RtpsBaseMessageTypesTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsBaseMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsBaseMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsBaseMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsBaseMessageTypesTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsBaseMessageTypesTypeSupport.idl RtpsBaseMessageTypesTypeSupportImpl.h RtpsBaseMessageTypesTypeSupportImpl.cpp: RtpsBaseMessageTypes.idl $(call ADD_ARCH,../../../bin/opendds_idl) $(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../../../dds/idl/HTemplate.txt) $(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",../../../bin/opendds_idl),../../../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../../../bin/opendds_idl))) -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsBaseMessageTypes.idl


GENERATED_DIRTY += RtpsMessageTypesTypeSupport.idl RtpsMessageTypesTypeSupportImpl.h RtpsMessageTypesTypeSupportImpl.cpp
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "RtpsMessageTypes.idl" -nt "RtpsMessageTypesTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../bin/opendds_idl)" -nt "RtpsMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/HTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsMessageTypesTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)" -nt "RtpsMessageTypesTypeSupportImpl.cpp" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
RtpsMessageTypesTypeSupport.idl RtpsMessageTypesTypeSupportImpl.h RtpsMessageTypesTypeSupportImpl.cpp: RtpsMessageTypes.idl $(call ADD_ARCH,../../../bin/opendds_idl) $(call ADD_ARCH,../../../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../../../dds/idl/HTemplate.txt) $(call ADD_ARCH,../../../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",../../../bin/opendds_idl),../../../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../../../bin/opendds_idl))) -Wb,export_macro=OpenDDS_Rtps_Export -Wb,export_include=rtps_export.h RtpsMessageTypes.idl


ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
## If the generated files are anything but source files, we need to
## ensure that those files are generated before we attempt to build anything
## else.
ifeq ($(OBJS_DEPEND_ON_GENERATED),1)
$(VDIR)$(ACE_PCH_FILE) $(addprefix $(VDIR), $(OBJS)): $(GENERATED_DIRTY)
$(VSHDIR)$(ACE_PCH_FILE) $(VSHOBJS): $(GENERATED_DIRTY)
endif
endif

ADDITIONAL_IDL_TARGETS += RtpsBaseMessageTypesTypeSupport$(IDL_CLIENT_HDR_EXT) RtpsMessageTypesTypeSupport$(IDL_CLIENT_HDR_EXT) RtpsBaseMessageTypes$(IDL_CLIENT_HDR_EXT) RtpsMessageTypes$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)

# This assignment forces make to run the idl_stubs
# target before building any of the source files.
FORCED_IDL_STUBS = RtpsBaseMessageTypesTypeSupportImpl.cpp RtpsMessageTypesTypeSupportImpl.cpp RtpsBaseMessageTypesTypeSupportC.cpp RtpsBaseMessageTypesTypeSupportS.cpp RtpsMessageTypesTypeSupportC.cpp RtpsMessageTypesTypeSupportS.cpp RtpsBaseMessageTypesC.cpp RtpsBaseMessageTypesS.cpp RtpsMessageTypesC.cpp RtpsMessageTypesS.cpp md5.cpp GuidGenerator.cpp RtpsDiscovery.cpp ParameterListConverter.cpp Sedp.cpp Spdp.cpp  
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsBaseMessageTypesTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsBaseMessageTypesTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsMessageTypesTypeSupportC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsMessageTypesTypeSupportS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsBaseMessageTypesC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsBaseMessageTypesS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsMessageTypesC.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsMessageTypesS.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsBaseMessageTypesTypeSupportImpl.cpp=)
FORCED_IDL_STUBS := $(FORCED_IDL_STUBS:RtpsMessageTypesTypeSupportImpl.cpp=)

ifneq ($(FORCED_IDL_STUBS),)
$(FORCED_IDL_STUBS): idl_stubs
endif


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /dds/DCPS/RTPS
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  idl_files idl_files idl_files idl_files typesupport_files typesupport_files )

LIB_INST_TAGS = header_files template_files inline_files$(if $(CUSTOM_INST_TAGS), $(CUSTOM_INST_TAGS))
LIB_INST_LOCATIONS = $(foreach tag,$(LIB_INST_TAGS),-b $(tag)=include$(INST_DIR))

INST_TAGS = lib_output$(if $(LIB_INST_TAGS), $(LIB_INST_TAGS))
INST_LOCATIONS = $(LIB_INST_LOCATIONS) -o lib_output=$(INSTALL_LIB)

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#inline_files:
#RtpsBaseMessageTypesTypeSupportC.inl
#RtpsMessageTypesC.inl
#RtpsBaseMessageTypesC.inl
#RtpsMessageTypesTypeSupportC.inl
#
#resource_files:
#rtps.rc
#
#idl_files:
#RtpsBaseMessageTypesTypeSupport.idl
#RtpsMessageTypesTypeSupport.idl
#RtpsBaseMessageTypes.idl
#RtpsMessageTypes.idl
#
#header_files:
#RtpsBaseMessageTypesTypeSupportImpl.h
#RtpsMessageTypesTypeSupportImpl.h
#RtpsBaseMessageTypesTypeSupportS.h
#RtpsBaseMessageTypesTypeSupportC.h
#RtpsMessageTypesS.h
#RtpsMessageTypesC.h
#RtpsBaseMessageTypesS.h
#RtpsBaseMessageTypesC.h
#RtpsMessageTypesTypeSupportS.h
#RtpsMessageTypesTypeSupportC.h
#md5.h
#Sedp.h
#RtpsDiscovery.h
#GuidGenerator.h
#Spdp.h
#ParameterListConverter.h
#MessageTypes.h
#rtps_export.h
#BaseMessageUtils.h
#BaseMessageTypes.h
#
#typesupport_files:
#RtpsBaseMessageTypes.idl
#RtpsMessageTypes.idl
#
#build_files:
#rtps.mpc
#
#source_files:
#RtpsBaseMessageTypesTypeSupportImpl.cpp
#RtpsMessageTypesTypeSupportImpl.cpp
#RtpsBaseMessageTypesTypeSupportC.cpp
#RtpsBaseMessageTypesTypeSupportS.cpp
#RtpsMessageTypesTypeSupportC.cpp
#RtpsMessageTypesTypeSupportS.cpp
#RtpsBaseMessageTypesC.cpp
#RtpsBaseMessageTypesS.cpp
#RtpsMessageTypesC.cpp
#RtpsMessageTypesS.cpp
#md5.cpp
#GuidGenerator.cpp
#RtpsDiscovery.cpp
#ParameterListConverter.cpp
#Sedp.cpp
#Spdp.cpp
#
#lib_output:
#../../../lib OpenDDS_Rtps

#END MPC-Generated Install Info

