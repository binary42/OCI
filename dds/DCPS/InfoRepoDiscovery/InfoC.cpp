// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "InfoC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/SystemException.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "InfoC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

OpenDDS::DCPS::Invalid_Domain::Invalid_Domain (void)
  : ::CORBA::UserException (
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        "Invalid_Domain"
      )
{
}

OpenDDS::DCPS::Invalid_Domain::~Invalid_Domain (void)
{
}

OpenDDS::DCPS::Invalid_Domain::Invalid_Domain (const ::OpenDDS::DCPS::Invalid_Domain &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OpenDDS::DCPS::Invalid_Domain&
OpenDDS::DCPS::Invalid_Domain::operator= (const ::OpenDDS::DCPS::Invalid_Domain &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OpenDDS::DCPS::Invalid_Domain *
OpenDDS::DCPS::Invalid_Domain::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid_Domain *> (_tao_excp);
}

const OpenDDS::DCPS::Invalid_Domain *
OpenDDS::DCPS::Invalid_Domain::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid_Domain *> (_tao_excp);
}

::CORBA::Exception *OpenDDS::DCPS::Invalid_Domain::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OpenDDS::DCPS::Invalid_Domain, 0);
  return retval;
}

::CORBA::Exception *
OpenDDS::DCPS::Invalid_Domain::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OpenDDS::DCPS::Invalid_Domain (*this),
      0
    );
  return result;
}

void OpenDDS::DCPS::Invalid_Domain::_raise (void) const
{
  throw *this;
}

void OpenDDS::DCPS::Invalid_Domain::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OpenDDS::DCPS::Invalid_Domain::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

OpenDDS::DCPS::Invalid_Participant::Invalid_Participant (void)
  : ::CORBA::UserException (
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        "Invalid_Participant"
      )
{
}

OpenDDS::DCPS::Invalid_Participant::~Invalid_Participant (void)
{
}

OpenDDS::DCPS::Invalid_Participant::Invalid_Participant (const ::OpenDDS::DCPS::Invalid_Participant &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OpenDDS::DCPS::Invalid_Participant&
OpenDDS::DCPS::Invalid_Participant::operator= (const ::OpenDDS::DCPS::Invalid_Participant &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OpenDDS::DCPS::Invalid_Participant *
OpenDDS::DCPS::Invalid_Participant::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid_Participant *> (_tao_excp);
}

const OpenDDS::DCPS::Invalid_Participant *
OpenDDS::DCPS::Invalid_Participant::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid_Participant *> (_tao_excp);
}

::CORBA::Exception *OpenDDS::DCPS::Invalid_Participant::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OpenDDS::DCPS::Invalid_Participant, 0);
  return retval;
}

::CORBA::Exception *
OpenDDS::DCPS::Invalid_Participant::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OpenDDS::DCPS::Invalid_Participant (*this),
      0
    );
  return result;
}

void OpenDDS::DCPS::Invalid_Participant::_raise (void) const
{
  throw *this;
}

void OpenDDS::DCPS::Invalid_Participant::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OpenDDS::DCPS::Invalid_Participant::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

OpenDDS::DCPS::Invalid_Publication::Invalid_Publication (void)
  : ::CORBA::UserException (
        "IDL:OpenDDS/DCPS/Invalid_Publication:1.0",
        "Invalid_Publication"
      )
{
}

OpenDDS::DCPS::Invalid_Publication::~Invalid_Publication (void)
{
}

OpenDDS::DCPS::Invalid_Publication::Invalid_Publication (const ::OpenDDS::DCPS::Invalid_Publication &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OpenDDS::DCPS::Invalid_Publication&
OpenDDS::DCPS::Invalid_Publication::operator= (const ::OpenDDS::DCPS::Invalid_Publication &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OpenDDS::DCPS::Invalid_Publication *
OpenDDS::DCPS::Invalid_Publication::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid_Publication *> (_tao_excp);
}

const OpenDDS::DCPS::Invalid_Publication *
OpenDDS::DCPS::Invalid_Publication::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid_Publication *> (_tao_excp);
}

::CORBA::Exception *OpenDDS::DCPS::Invalid_Publication::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OpenDDS::DCPS::Invalid_Publication, 0);
  return retval;
}

::CORBA::Exception *
OpenDDS::DCPS::Invalid_Publication::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OpenDDS::DCPS::Invalid_Publication (*this),
      0
    );
  return result;
}

void OpenDDS::DCPS::Invalid_Publication::_raise (void) const
{
  throw *this;
}

void OpenDDS::DCPS::Invalid_Publication::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OpenDDS::DCPS::Invalid_Publication::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

OpenDDS::DCPS::Invalid_Subscription::Invalid_Subscription (void)
  : ::CORBA::UserException (
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        "Invalid_Subscription"
      )
{
}

OpenDDS::DCPS::Invalid_Subscription::~Invalid_Subscription (void)
{
}

OpenDDS::DCPS::Invalid_Subscription::Invalid_Subscription (const ::OpenDDS::DCPS::Invalid_Subscription &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OpenDDS::DCPS::Invalid_Subscription&
OpenDDS::DCPS::Invalid_Subscription::operator= (const ::OpenDDS::DCPS::Invalid_Subscription &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OpenDDS::DCPS::Invalid_Subscription *
OpenDDS::DCPS::Invalid_Subscription::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid_Subscription *> (_tao_excp);
}

const OpenDDS::DCPS::Invalid_Subscription *
OpenDDS::DCPS::Invalid_Subscription::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid_Subscription *> (_tao_excp);
}

::CORBA::Exception *OpenDDS::DCPS::Invalid_Subscription::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OpenDDS::DCPS::Invalid_Subscription, 0);
  return retval;
}

::CORBA::Exception *
OpenDDS::DCPS::Invalid_Subscription::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OpenDDS::DCPS::Invalid_Subscription (*this),
      0
    );
  return result;
}

void OpenDDS::DCPS::Invalid_Subscription::_raise (void) const
{
  throw *this;
}

void OpenDDS::DCPS::Invalid_Subscription::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OpenDDS::DCPS::Invalid_Subscription::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_exception/exception_cs.cpp:101

OpenDDS::DCPS::Invalid_Topic::Invalid_Topic (void)
  : ::CORBA::UserException (
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        "Invalid_Topic"
      )
{
}

OpenDDS::DCPS::Invalid_Topic::~Invalid_Topic (void)
{
}

OpenDDS::DCPS::Invalid_Topic::Invalid_Topic (const ::OpenDDS::DCPS::Invalid_Topic &_tao_excp)
  : ::CORBA::UserException (
        _tao_excp._rep_id (),
        _tao_excp._name ()
      )
{
}

OpenDDS::DCPS::Invalid_Topic&
OpenDDS::DCPS::Invalid_Topic::operator= (const ::OpenDDS::DCPS::Invalid_Topic &_tao_excp)
{
  this->::CORBA::UserException::operator= (_tao_excp);
  return *this;
}

OpenDDS::DCPS::Invalid_Topic *
OpenDDS::DCPS::Invalid_Topic::_downcast ( ::CORBA::Exception *_tao_excp)
{
  return dynamic_cast<Invalid_Topic *> (_tao_excp);
}

const OpenDDS::DCPS::Invalid_Topic *
OpenDDS::DCPS::Invalid_Topic::_downcast ( ::CORBA::Exception const *_tao_excp)
{
  return dynamic_cast<const Invalid_Topic *> (_tao_excp);
}

::CORBA::Exception *OpenDDS::DCPS::Invalid_Topic::_alloc (void)
{
  ::CORBA::Exception *retval = 0;
  ACE_NEW_RETURN (retval, ::OpenDDS::DCPS::Invalid_Topic, 0);
  return retval;
}

::CORBA::Exception *
OpenDDS::DCPS::Invalid_Topic::_tao_duplicate (void) const
{
  ::CORBA::Exception *result = 0;
  ACE_NEW_RETURN (
      result,
      ::OpenDDS::DCPS::Invalid_Topic (*this),
      0
    );
  return result;
}

void OpenDDS::DCPS::Invalid_Topic::_raise (void) const
{
  throw *this;
}

void OpenDDS::DCPS::Invalid_Topic::_tao_encode (TAO_OutputCDR &cdr) const
{
  if (!(cdr << *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}

void OpenDDS::DCPS::Invalid_Topic::_tao_decode (TAO_InputCDR &cdr)
{
  if (!(cdr >> *this))
    {
      throw ::CORBA::MARSHAL ();
    }
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for OpenDDS::DCPS::DCPSInfo.

OpenDDS::DCPS::DCPSInfo_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DCPSInfo>::duplicate (
    OpenDDS::DCPS::DCPSInfo_ptr p)
{
  return OpenDDS::DCPS::DCPSInfo::_duplicate (p);
}

void
TAO::Objref_Traits<OpenDDS::DCPS::DCPSInfo>::release (
    OpenDDS::DCPS::DCPSInfo_ptr p)
{
  ::CORBA::release (p);
}

OpenDDS::DCPS::DCPSInfo_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DCPSInfo>::nil (void)
{
  return OpenDDS::DCPS::DCPSInfo::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OpenDDS::DCPS::DCPSInfo>::marshal (
    const OpenDDS::DCPS::DCPSInfo_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::attach_participant (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_attach_participant_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "attach_participant",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_attach_participant_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::TopicStatus
OpenDDS::DCPS::DCPSInfo::assert_topic (
  ::OpenDDS::DCPS::RepoId_out topicId,
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const char * topicName,
  const char * DataTypeName,
  const ::DDS::TopicQos & qos,
  ::CORBA::Boolean hasDcpsKey)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_val _tao_topicId (topicId);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< char *>::in_arg_val _tao_topicName (topicName);
  TAO::Arg_Traits< char *>::in_arg_val _tao_DataTypeName (DataTypeName);
  TAO::Arg_Traits< ::DDS::TopicQos>::in_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_hasDcpsKey (hasDcpsKey);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_topicId,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicName,
      &_tao_DataTypeName,
      &_tao_qos,
      &_tao_hasDcpsKey
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_assert_topic_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "assert_topic",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_assert_topic_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::TopicStatus
OpenDDS::DCPS::DCPSInfo::find_topic (
  ::DDS::DomainId_t domainId,
  const char * topicName,
  ::CORBA::String_out DataTypeName,
  ::DDS::TopicQos_out qos,
  ::OpenDDS::DCPS::RepoId_out topicId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< char *>::in_arg_val _tao_topicName (topicName);
  TAO::Arg_Traits< char *>::out_arg_val _tao_DataTypeName (DataTypeName);
  TAO::Arg_Traits< ::DDS::TopicQos>::out_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_val _tao_topicId (topicId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_topicName,
      &_tao_DataTypeName,
      &_tao_qos,
      &_tao_topicId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_find_topic_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      6,
      "find_topic",
      10,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_find_topic_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::TopicStatus
OpenDDS::DCPS::DCPSInfo::remove_topic (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & topicId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId (topicId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_remove_topic_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        OpenDDS::DCPS::Invalid_Topic::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "remove_topic",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_remove_topic_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::RepoId
OpenDDS::DCPS::DCPSInfo::add_publication (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & topicId,
  ::OpenDDS::DCPS::DataWriterRemote_ptr publication,
  const ::DDS::DataWriterQos & qos,
  const ::OpenDDS::DCPS::TransportLocatorSeq & transInfo,
  const ::DDS::PublisherQos & publisherQos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId (topicId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::DataWriterRemote>::in_arg_val _tao_publication (publication);
  TAO::Arg_Traits< ::DDS::DataWriterQos>::in_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_val _tao_transInfo (transInfo);
  TAO::Arg_Traits< ::DDS::PublisherQos>::in_arg_val _tao_publisherQos (publisherQos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId,
      &_tao_publication,
      &_tao_qos,
      &_tao_transInfo,
      &_tao_publisherQos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_add_publication_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        OpenDDS::DCPS::Invalid_Topic::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      8,
      "add_publication",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_add_publication_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::remove_publication (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & publicationId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_publicationId (publicationId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_publicationId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_remove_publication_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Publication:1.0",
        OpenDDS::DCPS::Invalid_Publication::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "remove_publication",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_remove_publication_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::RepoId
OpenDDS::DCPS::DCPSInfo::add_subscription (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & topicId,
  ::OpenDDS::DCPS::DataReaderRemote_ptr subscription,
  const ::DDS::DataReaderQos & qos,
  const ::OpenDDS::DCPS::TransportLocatorSeq & transInfo,
  const ::DDS::SubscriberQos & subscriberQos,
  const char * filterExpression,
  const ::DDS::StringSeq & exprParams)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId (topicId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::DataReaderRemote>::in_arg_val _tao_subscription (subscription);
  TAO::Arg_Traits< ::DDS::DataReaderQos>::in_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_val _tao_transInfo (transInfo);
  TAO::Arg_Traits< ::DDS::SubscriberQos>::in_arg_val _tao_subscriberQos (subscriberQos);
  TAO::Arg_Traits< char *>::in_arg_val _tao_filterExpression (filterExpression);
  TAO::Arg_Traits< ::DDS::StringSeq>::in_arg_val _tao_exprParams (exprParams);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId,
      &_tao_subscription,
      &_tao_qos,
      &_tao_transInfo,
      &_tao_subscriberQos,
      &_tao_filterExpression,
      &_tao_exprParams
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_add_subscription_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        OpenDDS::DCPS::Invalid_Topic::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      10,
      "add_subscription",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_add_subscription_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::remove_subscription (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & subscriptionId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId (subscriptionId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_remove_subscription_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        OpenDDS::DCPS::Invalid_Subscription::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "remove_subscription",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_remove_subscription_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::AddDomainStatus
OpenDDS::DCPS::DCPSInfo::add_domain_participant (
  ::DDS::DomainId_t domain,
  const ::DDS::DomainParticipantQos & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::AddDomainStatus>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domain (domain);
  TAO::Arg_Traits< ::DDS::DomainParticipantQos>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domain,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_add_domain_participant_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "add_domain_participant",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_add_domain_participant_exceptiondata,
      1
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::remove_domain_participant (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_remove_domain_participant_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "remove_domain_participant",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_remove_domain_participant_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::association_complete (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & localId,
  const ::OpenDDS::DCPS::RepoId & remoteId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_localId (localId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remoteId (remoteId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_localId,
      &_tao_remoteId
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "association_complete",
      20,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_ONEWAY_INVOCATION
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::disassociate_participant (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & local_id,
  const ::OpenDDS::DCPS::RepoId & remote_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id (local_id);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id (remote_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_local_id,
      &_tao_remote_id
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_disassociate_participant_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "disassociate_participant",
      24,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_disassociate_participant_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::disassociate_subscription (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & local_id,
  const ::OpenDDS::DCPS::RepoId & remote_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id (local_id);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id (remote_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_local_id,
      &_tao_remote_id
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_disassociate_subscription_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        OpenDDS::DCPS::Invalid_Subscription::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "disassociate_subscription",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_disassociate_subscription_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::disassociate_publication (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & local_id,
  const ::OpenDDS::DCPS::RepoId & remote_id)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id (local_id);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id (remote_id);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_local_id,
      &_tao_remote_id
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_disassociate_publication_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Publication:1.0",
        OpenDDS::DCPS::Invalid_Publication::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "disassociate_publication",
      24,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_disassociate_publication_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::ignore_domain_participant (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & myParticipantId,
  const ::OpenDDS::DCPS::RepoId & ignoreId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId (myParticipantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId (ignoreId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_ignore_domain_participant_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "ignore_domain_participant",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_ignore_domain_participant_exceptiondata,
      2
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::ignore_topic (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & myParticipantId,
  const ::OpenDDS::DCPS::RepoId & ignoreId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId (myParticipantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId (ignoreId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_ignore_topic_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        OpenDDS::DCPS::Invalid_Topic::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "ignore_topic",
      12,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_ignore_topic_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::ignore_subscription (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & myParticipantId,
  const ::OpenDDS::DCPS::RepoId & ignoreId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId (myParticipantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId (ignoreId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_ignore_subscription_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        OpenDDS::DCPS::Invalid_Subscription::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "ignore_subscription",
      19,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_ignore_subscription_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::ignore_publication (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & myParticipantId,
  const ::OpenDDS::DCPS::RepoId & ignoreId)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId (myParticipantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId (ignoreId);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_ignore_publication_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Publication:1.0",
        OpenDDS::DCPS::Invalid_Publication::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "ignore_publication",
      18,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_ignore_publication_exceptiondata,
      3
    );
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::update_domain_participant_qos (
  ::DDS::DomainId_t domain,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::DDS::DomainParticipantQos & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domain (domain);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::DDS::DomainParticipantQos>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domain,
      &_tao_participantId,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_update_domain_participant_qos_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      4,
      "update_domain_participant_qos",
      29,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_update_domain_participant_qos_exceptiondata,
      2
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::update_topic_qos (
  const ::OpenDDS::DCPS::RepoId & topicId,
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::DDS::TopicQos & qos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId (topicId);
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::DDS::TopicQos>::in_arg_val _tao_qos (qos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_topicId,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_qos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_update_topic_qos_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Topic:1.0",
        OpenDDS::DCPS::Invalid_Topic::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "update_topic_qos",
      16,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_update_topic_qos_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::update_publication_qos (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & publicationId,
  const ::DDS::DataWriterQos & qos,
  const ::DDS::PublisherQos & publisherQos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_publicationId (publicationId);
  TAO::Arg_Traits< ::DDS::DataWriterQos>::in_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::DDS::PublisherQos>::in_arg_val _tao_publisherQos (publisherQos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_publicationId,
      &_tao_qos,
      &_tao_publisherQos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_update_publication_qos_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Publication:1.0",
        OpenDDS::DCPS::Invalid_Publication::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      6,
      "update_publication_qos",
      22,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_update_publication_qos_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::update_subscription_qos (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & subscriptionId,
  const ::DDS::DataReaderQos & qos,
  const ::DDS::SubscriberQos & subscriberQos)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId (subscriptionId);
  TAO::Arg_Traits< ::DDS::DataReaderQos>::in_arg_val _tao_qos (qos);
  TAO::Arg_Traits< ::DDS::SubscriberQos>::in_arg_val _tao_subscriberQos (subscriberQos);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId,
      &_tao_qos,
      &_tao_subscriberQos
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_update_subscription_qos_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        OpenDDS::DCPS::Invalid_Subscription::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      6,
      "update_subscription_qos",
      23,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_update_subscription_qos_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::update_subscription_params (
  ::DDS::DomainId_t domainId,
  const ::OpenDDS::DCPS::RepoId & participantId,
  const ::OpenDDS::DCPS::RepoId & subscriptionId,
  const ::DDS::StringSeq & exprParams)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::ACE_InputCDR::to_boolean>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId (domainId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId (participantId);
  TAO::Arg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId (subscriptionId);
  TAO::Arg_Traits< ::DDS::StringSeq>::in_arg_val _tao_exprParams (exprParams);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId,
      &_tao_exprParams
    };

  static TAO::Exception_Data
  _tao_OpenDDS_DCPS_DCPSInfo_update_subscription_params_exceptiondata [] = 
    {
      {
        "IDL:OpenDDS/DCPS/Invalid_Domain:1.0",
        OpenDDS::DCPS::Invalid_Domain::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Participant:1.0",
        OpenDDS::DCPS::Invalid_Participant::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      },

      {
        "IDL:OpenDDS/DCPS/Invalid_Subscription:1.0",
        OpenDDS::DCPS::Invalid_Subscription::_alloc
#if TAO_HAS_INTERCEPTORS == 1
        , 0
#endif /* TAO_HAS_INTERCEPTORS */
      }
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      5,
      "update_subscription_params",
      26,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (
      _tao_OpenDDS_DCPS_DCPSInfo_update_subscription_params_exceptiondata,
      3
    );

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::DCPSInfo::shutdown (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "shutdown",
      8,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

char *
OpenDDS::DCPS::DCPSInfo::dump_to_string (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< char *>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "dump_to_string",
      14,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

OpenDDS::DCPS::DCPSInfo::DCPSInfo (void)
{
}

OpenDDS::DCPS::DCPSInfo::~DCPSInfo (void)
{
}

OpenDDS::DCPS::DCPSInfo_ptr
OpenDDS::DCPS::DCPSInfo::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DCPSInfo>::narrow (
        _tao_objref,
        "IDL:OpenDDS/DCPS/DCPSInfo:1.0");
}

OpenDDS::DCPS::DCPSInfo_ptr
OpenDDS::DCPS::DCPSInfo::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<DCPSInfo>::unchecked_narrow (
        _tao_objref);
}

OpenDDS::DCPS::DCPSInfo_ptr
OpenDDS::DCPS::DCPSInfo::_nil (void)
{
  return 0;
}

OpenDDS::DCPS::DCPSInfo_ptr
OpenDDS::DCPS::DCPSInfo::_duplicate (DCPSInfo_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OpenDDS::DCPS::DCPSInfo::_tao_release (DCPSInfo_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DCPSInfo:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OpenDDS::DCPS::DCPSInfo::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/DCPSInfo:1.0";
}

::CORBA::Boolean
OpenDDS::DCPS::DCPSInfo::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Invalid_Domain &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OpenDDS::DCPS::Invalid_Domain&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Invalid_Participant &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OpenDDS::DCPS::Invalid_Participant&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Invalid_Publication &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OpenDDS::DCPS::Invalid_Publication&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Invalid_Subscription &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OpenDDS::DCPS::Invalid_Subscription&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_exception/cdr_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Invalid_Topic &_tao_aggregate
  )
{
  // Marshal the repository ID.
  return (strm << _tao_aggregate._rep_id ());
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &,
    OpenDDS::DCPS::Invalid_Topic&
  )
{
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DCPSInfo_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DCPSInfo_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OpenDDS::DCPS::DCPSInfo RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



