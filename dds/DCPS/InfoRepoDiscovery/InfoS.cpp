// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:652

#ifndef _TAO_IDL_INFOS_6XSDRY_CPP_
#define _TAO_IDL_INFOS_6XSDRY_CPP_


#include "InfoS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1868

class TAO_OpenDDS_DCPS_DCPSInfo_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /home/borotech/Development/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_OpenDDS_DCPS_DCPSInfo_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_OpenDDS_DCPS_DCPSInfo_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70, 70, 70,
     70, 70, 70, 70, 70, 25, 70,  0, 70, 10,
     30,  0,  5,  0, 70, 23, 70, 70, 70, 70,
      0, 70, 70, 70, 30,  0,  5, 10, 70, 70,
     70, 70, 70, 70, 70, 70, 70, 70,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_OpenDDS_DCPS_DCPSInfo_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 30,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 29,
      MIN_HASH_VALUE = 8,
      MAX_HASH_VALUE = 69,
      HASH_VALUE_RANGE = 62,
      DUPLICATES = 0,
      WORDLIST_SIZE = 38
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"shutdown", &POA_OpenDDS::DCPS::DCPSInfo::shutdown_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"add_publication", &POA_OpenDDS::DCPS::DCPSInfo::add_publication_skel, 0},
      {"add_subscription", &POA_OpenDDS::DCPS::DCPSInfo::add_subscription_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"association_complete", &POA_OpenDDS::DCPS::DCPSInfo::association_complete_skel, 0},
      {"",0,0},
      {"assert_topic", &POA_OpenDDS::DCPS::DCPSInfo::assert_topic_skel, 0},
      {"attach_participant", &POA_OpenDDS::DCPS::DCPSInfo::attach_participant_skel, 0},
      {"",0,0},
      {"find_topic", &POA_OpenDDS::DCPS::DCPSInfo::find_topic_skel, 0},
      {"update_topic_qos", &POA_OpenDDS::DCPS::DCPSInfo::update_topic_qos_skel, 0},
      {"add_domain_participant", &POA_OpenDDS::DCPS::DCPSInfo::add_domain_participant_skel, 0},
      {"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},
      {"update_publication_qos", &POA_OpenDDS::DCPS::DCPSInfo::update_publication_qos_skel, 0},
      {"update_subscription_qos", &POA_OpenDDS::DCPS::DCPSInfo::update_subscription_qos_skel, 0},
      {"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
      {"update_subscription_params", &POA_OpenDDS::DCPS::DCPSInfo::update_subscription_params_skel, 0},
      {"",0,0},{"",0,0},
      {"update_domain_participant_qos", &POA_OpenDDS::DCPS::DCPSInfo::update_domain_participant_qos_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"ignore_publication", &POA_OpenDDS::DCPS::DCPSInfo::ignore_publication_skel, 0},
      {"ignore_subscription", &POA_OpenDDS::DCPS::DCPSInfo::ignore_subscription_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"dump_to_string", &POA_OpenDDS::DCPS::DCPSInfo::dump_to_string_skel, 0},
      {"ignore_topic", &POA_OpenDDS::DCPS::DCPSInfo::ignore_topic_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_publication", &POA_OpenDDS::DCPS::DCPSInfo::remove_publication_skel, 0},
      {"remove_subscription", &POA_OpenDDS::DCPS::DCPSInfo::remove_subscription_skel, 0},
      {"",0,0},{"",0,0},
      {"remove_topic", &POA_OpenDDS::DCPS::DCPSInfo::remove_topic_skel, 0},
      {"ignore_domain_participant", &POA_OpenDDS::DCPS::DCPSInfo::ignore_domain_participant_skel, 0},
      {"disassociate_publication", &POA_OpenDDS::DCPS::DCPSInfo::disassociate_publication_skel, 0},
      {"disassociate_subscription", &POA_OpenDDS::DCPS::DCPSInfo::disassociate_subscription_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"disassociate_participant", &POA_OpenDDS::DCPS::DCPSInfo::disassociate_participant_skel, 0},
      {"remove_domain_participant", &POA_OpenDDS::DCPS::DCPSInfo::remove_domain_participant_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_OpenDDS_DCPS_DCPSInfo_Perfect_Hash_OpTable tao_OpenDDS_DCPS_DCPSInfo_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_OpenDDS::DCPS::DCPSInfo::DCPSInfo (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_OpenDDS_DCPS_DCPSInfo_optable;
}

POA_OpenDDS::DCPS::DCPSInfo::DCPSInfo (const DCPSInfo& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_OpenDDS::DCPS::DCPSInfo::~DCPSInfo (void)
{
}

namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class attach_participant_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline attach_participant_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        retval =
          this->servant_->attach_participant (
            arg_1
            , arg_2);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::attach_participant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId
    };
  
  static size_t const nargs = 3;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  attach_participant_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class assert_topic_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline assert_topic_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::TopicStatus> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_type arg_1 =
          TAO::Portable_Server::get_out_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< char *>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< char *> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< char *>::in_arg_type arg_5 =
          TAO::Portable_Server::get_in_arg< char *> (
            this->operation_details_,
            this->args_,
            5);
          
        TAO::SArg_Traits< ::DDS::TopicQos>::in_arg_type arg_6 =
          TAO::Portable_Server::get_in_arg< ::DDS::TopicQos> (
            this->operation_details_,
            this->args_,
            6);
          
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_type arg_7 =
          TAO::Portable_Server::get_in_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_,
            7);
          
        retval =
          this->servant_->assert_topic (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5
            , arg_6
            , arg_7);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::assert_topic_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_val _tao_topicId;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< char *>::in_arg_val _tao_topicName;
  TAO::SArg_Traits< char *>::in_arg_val _tao_DataTypeName;
  TAO::SArg_Traits< ::DDS::TopicQos>::in_arg_val _tao_qos;
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::in_arg_val _tao_hasDcpsKey;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_topicId,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicName,
      &_tao_DataTypeName,
      &_tao_qos,
      &_tao_hasDcpsKey
    };
  
  static size_t const nargs = 8;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  assert_topic_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class find_topic_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline find_topic_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::TopicStatus> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< char *>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< char *> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< char *>::out_arg_type arg_3 =
          TAO::Portable_Server::get_out_arg< char *> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::DDS::TopicQos>::out_arg_type arg_4 =
          TAO::Portable_Server::get_out_arg< ::DDS::TopicQos> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_type arg_5 =
          TAO::Portable_Server::get_out_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            5);
          
        retval =
          this->servant_->find_topic (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::find_topic_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< char *>::in_arg_val _tao_topicName;
  TAO::SArg_Traits< char *>::out_arg_val _tao_DataTypeName;
  TAO::SArg_Traits< ::DDS::TopicQos>::out_arg_val _tao_qos;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::out_arg_val _tao_topicId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_topicName,
      &_tao_DataTypeName,
      &_tao_qos,
      &_tao_topicId
    };
  
  static size_t const nargs = 6;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  find_topic_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class remove_topic_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline remove_topic_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::TopicStatus> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        retval =
          this->servant_->remove_topic (
            arg_1
            , arg_2
            , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::remove_topic_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::TopicStatus>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  remove_topic_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class add_publication_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline add_publication_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::DataWriterRemote>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::DataWriterRemote> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< ::DDS::DataWriterQos>::in_arg_type arg_5 =
          TAO::Portable_Server::get_in_arg< ::DDS::DataWriterQos> (
            this->operation_details_,
            this->args_,
            5);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_type arg_6 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::TransportLocatorSeq> (
            this->operation_details_,
            this->args_,
            6);
          
        TAO::SArg_Traits< ::DDS::PublisherQos>::in_arg_type arg_7 =
          TAO::Portable_Server::get_in_arg< ::DDS::PublisherQos> (
            this->operation_details_,
            this->args_,
            7);
          
        retval =
          this->servant_->add_publication (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5
            , arg_6
            , arg_7);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::add_publication_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::DataWriterRemote>::in_arg_val _tao_publication;
  TAO::SArg_Traits< ::DDS::DataWriterQos>::in_arg_val _tao_qos;
  TAO::SArg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_val _tao_transInfo;
  TAO::SArg_Traits< ::DDS::PublisherQos>::in_arg_val _tao_publisherQos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId,
      &_tao_publication,
      &_tao_qos,
      &_tao_transInfo,
      &_tao_publisherQos
    };
  
  static size_t const nargs = 8;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  add_publication_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class remove_publication_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline remove_publication_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->remove_publication (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::remove_publication_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_publicationId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_publicationId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  remove_publication_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class add_subscription_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline add_subscription_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::DataReaderRemote>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::DataReaderRemote> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< ::DDS::DataReaderQos>::in_arg_type arg_5 =
          TAO::Portable_Server::get_in_arg< ::DDS::DataReaderQos> (
            this->operation_details_,
            this->args_,
            5);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_type arg_6 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::TransportLocatorSeq> (
            this->operation_details_,
            this->args_,
            6);
          
        TAO::SArg_Traits< ::DDS::SubscriberQos>::in_arg_type arg_7 =
          TAO::Portable_Server::get_in_arg< ::DDS::SubscriberQos> (
            this->operation_details_,
            this->args_,
            7);
          
        TAO::SArg_Traits< char *>::in_arg_type arg_8 =
          TAO::Portable_Server::get_in_arg< char *> (
            this->operation_details_,
            this->args_,
            8);
          
        TAO::SArg_Traits< ::DDS::StringSeq>::in_arg_type arg_9 =
          TAO::Portable_Server::get_in_arg< ::DDS::StringSeq> (
            this->operation_details_,
            this->args_,
            9);
          
        retval =
          this->servant_->add_subscription (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5
            , arg_6
            , arg_7
            , arg_8
            , arg_9);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::add_subscription_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::DataReaderRemote>::in_arg_val _tao_subscription;
  TAO::SArg_Traits< ::DDS::DataReaderQos>::in_arg_val _tao_qos;
  TAO::SArg_Traits< ::OpenDDS::DCPS::TransportLocatorSeq>::in_arg_val _tao_transInfo;
  TAO::SArg_Traits< ::DDS::SubscriberQos>::in_arg_val _tao_subscriberQos;
  TAO::SArg_Traits< char *>::in_arg_val _tao_filterExpression;
  TAO::SArg_Traits< ::DDS::StringSeq>::in_arg_val _tao_exprParams;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_topicId,
      &_tao_subscription,
      &_tao_qos,
      &_tao_transInfo,
      &_tao_subscriberQos,
      &_tao_filterExpression,
      &_tao_exprParams
    };
  
  static size_t const nargs = 10;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  add_subscription_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class remove_subscription_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline remove_subscription_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->remove_subscription (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::remove_subscription_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  remove_subscription_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class add_domain_participant_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline add_domain_participant_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::AddDomainStatus>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::AddDomainStatus> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::DDS::DomainParticipantQos>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::DDS::DomainParticipantQos> (
            this->operation_details_,
            this->args_,
            2);
          
        retval =
          this->servant_->add_domain_participant (
            arg_1
            , arg_2);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::add_domain_participant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::AddDomainStatus>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domain;
  TAO::SArg_Traits< ::DDS::DomainParticipantQos>::in_arg_val _tao_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domain,
      &_tao_qos
    };
  
  static size_t const nargs = 3;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  add_domain_participant_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class remove_domain_participant_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline remove_domain_participant_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        this->servant_->remove_domain_participant (
          arg_1
          , arg_2);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::remove_domain_participant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId
    };
  
  static size_t const nargs = 3;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  remove_domain_participant_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class association_complete_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline association_complete_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            4);
          
        this->servant_->association_complete (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::association_complete_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_localId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remoteId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_localId,
      &_tao_remoteId
    };
  
  static size_t const nargs = 5;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  association_complete_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class disassociate_participant_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline disassociate_participant_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->disassociate_participant (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::disassociate_participant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_local_id,
      &_tao_remote_id
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  disassociate_participant_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class disassociate_subscription_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline disassociate_subscription_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            4);
          
        this->servant_->disassociate_subscription (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::disassociate_subscription_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_local_id,
      &_tao_remote_id
    };
  
  static size_t const nargs = 5;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  disassociate_subscription_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class disassociate_publication_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline disassociate_publication_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            4);
          
        this->servant_->disassociate_publication (
          arg_1
          , arg_2
          , arg_3
          , arg_4);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::disassociate_publication_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_local_id;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_remote_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_local_id,
      &_tao_remote_id
    };
  
  static size_t const nargs = 5;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  disassociate_publication_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class ignore_domain_participant_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline ignore_domain_participant_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->ignore_domain_participant (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::ignore_domain_participant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ignore_domain_participant_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class ignore_topic_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline ignore_topic_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->ignore_topic (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::ignore_topic_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ignore_topic_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class ignore_subscription_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline ignore_subscription_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->ignore_subscription (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::ignore_subscription_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ignore_subscription_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class ignore_publication_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline ignore_publication_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        this->servant_->ignore_publication (
          arg_1
          , arg_2
          , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::ignore_publication_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_myParticipantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_ignoreId;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_myParticipantId,
      &_tao_ignoreId
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  ignore_publication_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class update_domain_participant_qos_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline update_domain_participant_qos_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::DDS::DomainParticipantQos>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::DDS::DomainParticipantQos> (
            this->operation_details_,
            this->args_,
            3);
          
        retval =
          this->servant_->update_domain_participant_qos (
            arg_1
            , arg_2
            , arg_3);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::update_domain_participant_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domain;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::DDS::DomainParticipantQos>::in_arg_val _tao_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domain,
      &_tao_participantId,
      &_tao_qos
    };
  
  static size_t const nargs = 4;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_domain_participant_qos_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class update_topic_qos_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline update_topic_qos_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::DDS::TopicQos>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::DDS::TopicQos> (
            this->operation_details_,
            this->args_,
            4);
          
        retval =
          this->servant_->update_topic_qos (
            arg_1
            , arg_2
            , arg_3
            , arg_4);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::update_topic_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_topicId;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::DDS::TopicQos>::in_arg_val _tao_qos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_topicId,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_qos
    };
  
  static size_t const nargs = 5;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_topic_qos_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class update_publication_qos_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline update_publication_qos_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::DDS::DataWriterQos>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::DDS::DataWriterQos> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< ::DDS::PublisherQos>::in_arg_type arg_5 =
          TAO::Portable_Server::get_in_arg< ::DDS::PublisherQos> (
            this->operation_details_,
            this->args_,
            5);
          
        retval =
          this->servant_->update_publication_qos (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::update_publication_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_publicationId;
  TAO::SArg_Traits< ::DDS::DataWriterQos>::in_arg_val _tao_qos;
  TAO::SArg_Traits< ::DDS::PublisherQos>::in_arg_val _tao_publisherQos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_publicationId,
      &_tao_qos,
      &_tao_publisherQos
    };
  
  static size_t const nargs = 6;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_publication_qos_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class update_subscription_qos_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline update_subscription_qos_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::DDS::DataReaderQos>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::DDS::DataReaderQos> (
            this->operation_details_,
            this->args_,
            4);
          
        TAO::SArg_Traits< ::DDS::SubscriberQos>::in_arg_type arg_5 =
          TAO::Portable_Server::get_in_arg< ::DDS::SubscriberQos> (
            this->operation_details_,
            this->args_,
            5);
          
        retval =
          this->servant_->update_subscription_qos (
            arg_1
            , arg_2
            , arg_3
            , arg_4
            , arg_5);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::update_subscription_qos_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId;
  TAO::SArg_Traits< ::DDS::DataReaderQos>::in_arg_val _tao_qos;
  TAO::SArg_Traits< ::DDS::SubscriberQos>::in_arg_val _tao_subscriberQos;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId,
      &_tao_qos,
      &_tao_subscriberQos
    };
  
  static size_t const nargs = 6;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_subscription_qos_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class update_subscription_params_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline update_subscription_params_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            2);
          
        TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_type arg_3 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::DCPS::GUID_t> (
            this->operation_details_,
            this->args_,
            3);
          
        TAO::SArg_Traits< ::DDS::StringSeq>::in_arg_type arg_4 =
          TAO::Portable_Server::get_in_arg< ::DDS::StringSeq> (
            this->operation_details_,
            this->args_,
            4);
          
        retval =
          this->servant_->update_subscription_params (
            arg_1
            , arg_2
            , arg_3
            , arg_4);
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::update_subscription_params_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_domainId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_participantId;
  TAO::SArg_Traits< ::OpenDDS::DCPS::GUID_t>::in_arg_val _tao_subscriptionId;
  TAO::SArg_Traits< ::DDS::StringSeq>::in_arg_val _tao_exprParams;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_domainId,
      &_tao_participantId,
      &_tao_subscriptionId,
      &_tao_exprParams
    };
  
  static size_t const nargs = 5;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  update_subscription_params_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class shutdown_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline shutdown_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant)
        : servant_ (servant)
      {
      }

      virtual void execute (void)
      {
        this->servant_->shutdown ();
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_DCPSInfo command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace DCPS
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class dump_to_string_DCPSInfo
      : public TAO::Upcall_Command
    {
    public:
      inline dump_to_string_DCPSInfo (
        POA_OpenDDS::DCPS::DCPSInfo * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< char *>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< char *> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->dump_to_string ();
      }
    
    private:
      POA_OpenDDS::DCPS::DCPSInfo * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::DCPS::DCPSInfo::dump_to_string_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< char *>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::DCPS::DCPSInfo * const impl =
    dynamic_cast<POA_OpenDDS::DCPS::DCPSInfo *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  dump_to_string_DCPSInfo command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_OpenDDS::DCPS::DCPSInfo::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DCPSInfo:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_OpenDDS::DCPS::DCPSInfo::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/DCPSInfo:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_OpenDDS::DCPS::DCPSInfo::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

OpenDDS::DCPS::DCPSInfo *
POA_OpenDDS::DCPS::DCPSInfo::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::OpenDDS::DCPS::DCPSInfo STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

