# -*- Makefile -*-
#----------------------------------------------------------------------------
#       GNU Makefile
#
# @file GNUmakefile.OpenDDS_Dcps_idl_gen
#
# $Id: gnu.mpd 2179 2013-05-28 22:16:51Z mesnierp $
#
# This file was automatically generated by MPC.  Any changes made directly to
# this file will be lost the next time it is generated.
#
#----------------------------------------------------------------------------
MAKEFILE         = GNUmakefile.OpenDDS_Dcps_idl_gen
DEPENDENCY_FILE  = .depend.OpenDDS_Dcps_idl_gen


LIB_PREFIX      ?= lib

FILES = \


#----------------------------------------------------------------------------
#       Include macros and targets
#----------------------------------------------------------------------------
TAO_IDL = $(ACE_ROOT)/bin/tao_idl
TAO_IDL_DEP = $(ACE_ROOT)/bin/tao_idl$(EXEEXT)
TAO_IDLFLAGS = -Wb,pre_include=ace/pre.h -Wb,post_include=ace/post.h -I$(TAO_ROOT)$(if $(ARCH), -g $(call ADD_QUOTE,$(call ADD_ARCH,$(ACE_ROOT)/bin/ace_gperf)))

PRJ_TYPE = library

COLLAPSE_SLASHES = $(if $(findstring //,$(1)),$(call COLLAPSE_SLASHES,$(subst //,/,$(1))),$(1))
INSLIB ?= $(call COLLAPSE_SLASHES,.)
ifeq ($(INSLIB),.)
  ifeq ($(CURDIR),)
    ifeq ($(PWD),)
      PWD=$(shell pwd)
    endif
  else
    PWD=$(CURDIR)
  endif
  INSLIB = $(PWD)
endif
OUTPUT_DIRECTORY = $(INSLIB)

include $(ACE_ROOT)/include/makeinclude/wrapper_macros.GNU


GNUACE_PROJECT_VERSION ?= $(ACE_VERSION)

# To build multiple targets in the same directory on AIX, it works
# best to have a template directory per project.
# The compiler/linker isn't too smart about instantiating templates...
ifdef TEMPINCDIR
TEMPINCDIR := $(TEMPINCDIR)/OpenDDS_Dcps_idl_gen
all: $(TEMPINCDIR)
endif

ifneq ($(OUTPUT_DIRECTORY),)
.PHONY: create_output_directory.local
all: create_output_directory.local
create_output_directory.local:
	-@$(MKDIR) "$(OUTPUT_DIRECTORY)" $(ACE_NUL_STDERR)
endif

LIBCHECK = 1
ifneq ($(LIBCHECK), 1)
  all: lib_warning
endif


include $(ACE_ROOT)/include/makeinclude/macros.GNU
include $(ACE_ROOT)/include/makeinclude/rules.common.GNU
include $(ACE_ROOT)/include/makeinclude/rules.nonested.GNU
include $(ACE_ROOT)/include/makeinclude/rules.local.GNU
ifeq ($(VXWORKSLINK),1)
include $(TGT_DIR)/h/make/rules.$(PRJ_TYPE)
endif

ifeq ($(VXWORKSLINK),1)
LDLIBPATH     = -L.
else
LDFLAGS      += -L. $(if $(ARCH),-L./$(ARCH))
endif

#----------------------------------------------------------------------------
#       Local targets
#----------------------------------------------------------------------------
lib_warning:
	@echo OpenDDS_Dcps_idl_gen will not be built due to the following missing library: $(LIBCHECK) >&2

## Some OS's have /bin/test others only have /usr/bin/test
ifeq ($(wildcard /bin/test), /bin/test)
  TEST_EXE = /bin/test
else
ifeq ($(wildcard /usr/bin/test), /usr/bin/test)
  TEST_EXE = /usr/bin/test
endif
endif

SPACE = $(should_be_unset) $(should_be_unset)
DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += DdsDcpsInfrastructureTypeSupportImpl.cpp DdsDcpsInfrastructureTypeSupport.idl DdsDcpsInfrastructureTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupport.idl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfrastructureTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureTypeSupportImpl.cpp DdsDcpsInfrastructureTypeSupport.idl DdsDcpsInfrastructureTypeSupportImpl.h: DdsDcpsInfrastructure.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h DdsDcpsInfrastructure.idl


GENERATED_DIRTY += CorbaSeq/BooleanSeqTypeSupportImpl.cpp CorbaSeq/BooleanSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/BooleanSeq.idl" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/BooleanSeq.idl" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/BooleanSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/BooleanSeqTypeSupportImpl.cpp CorbaSeq/BooleanSeqTypeSupportImpl.h: CorbaSeq/BooleanSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/BooleanSeq.idl


GENERATED_DIRTY += CorbaSeq/CharSeqTypeSupportImpl.cpp CorbaSeq/CharSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/CharSeq.idl" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/CharSeq.idl" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/CharSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/CharSeqTypeSupportImpl.cpp CorbaSeq/CharSeqTypeSupportImpl.h: CorbaSeq/CharSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/CharSeq.idl


GENERATED_DIRTY += CorbaSeq/DoubleSeqTypeSupportImpl.cpp CorbaSeq/DoubleSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/DoubleSeq.idl" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/DoubleSeq.idl" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/DoubleSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/DoubleSeqTypeSupportImpl.cpp CorbaSeq/DoubleSeqTypeSupportImpl.h: CorbaSeq/DoubleSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/DoubleSeq.idl


GENERATED_DIRTY += CorbaSeq/FloatSeqTypeSupportImpl.cpp CorbaSeq/FloatSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/FloatSeq.idl" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/FloatSeq.idl" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/FloatSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/FloatSeqTypeSupportImpl.cpp CorbaSeq/FloatSeqTypeSupportImpl.h: CorbaSeq/FloatSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/FloatSeq.idl


GENERATED_DIRTY += CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp CorbaSeq/LongDoubleSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongDoubleSeq.idl" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongDoubleSeq.idl" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongDoubleSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp CorbaSeq/LongDoubleSeqTypeSupportImpl.h: CorbaSeq/LongDoubleSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongDoubleSeq.idl


GENERATED_DIRTY += CorbaSeq/LongLongSeqTypeSupportImpl.cpp CorbaSeq/LongLongSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongLongSeq.idl" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongLongSeq.idl" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongLongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongLongSeqTypeSupportImpl.cpp CorbaSeq/LongLongSeqTypeSupportImpl.h: CorbaSeq/LongLongSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongLongSeq.idl


GENERATED_DIRTY += CorbaSeq/LongSeqTypeSupportImpl.cpp CorbaSeq/LongSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/LongSeq.idl" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/LongSeq.idl" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/LongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/LongSeqTypeSupportImpl.cpp CorbaSeq/LongSeqTypeSupportImpl.h: CorbaSeq/LongSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/LongSeq.idl


GENERATED_DIRTY += CorbaSeq/OctetSeqTypeSupportImpl.cpp CorbaSeq/OctetSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/OctetSeq.idl" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/OctetSeq.idl" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/OctetSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/OctetSeqTypeSupportImpl.cpp CorbaSeq/OctetSeqTypeSupportImpl.h: CorbaSeq/OctetSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/OctetSeq.idl


GENERATED_DIRTY += CorbaSeq/ShortSeqTypeSupportImpl.cpp CorbaSeq/ShortSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ShortSeq.idl" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ShortSeq.idl" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ShortSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ShortSeqTypeSupportImpl.cpp CorbaSeq/ShortSeqTypeSupportImpl.h: CorbaSeq/ShortSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ShortSeq.idl


GENERATED_DIRTY += CorbaSeq/StringSeqTypeSupportImpl.cpp CorbaSeq/StringSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/StringSeq.idl" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/StringSeq.idl" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/StringSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/StringSeqTypeSupportImpl.cpp CorbaSeq/StringSeqTypeSupportImpl.h: CorbaSeq/StringSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/StringSeq.idl


GENERATED_DIRTY += CorbaSeq/ULongLongSeqTypeSupportImpl.cpp CorbaSeq/ULongLongSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ULongLongSeq.idl" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ULongLongSeq.idl" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongLongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ULongLongSeqTypeSupportImpl.cpp CorbaSeq/ULongLongSeqTypeSupportImpl.h: CorbaSeq/ULongLongSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ULongLongSeq.idl


GENERATED_DIRTY += CorbaSeq/ULongSeqTypeSupportImpl.cpp CorbaSeq/ULongSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/ULongSeq.idl" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/ULongSeq.idl" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/ULongSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/ULongSeqTypeSupportImpl.cpp CorbaSeq/ULongSeqTypeSupportImpl.h: CorbaSeq/ULongSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/ULongSeq.idl


GENERATED_DIRTY += CorbaSeq/UShortSeqTypeSupportImpl.cpp CorbaSeq/UShortSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/UShortSeq.idl" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/UShortSeq.idl" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/UShortSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/UShortSeqTypeSupportImpl.cpp CorbaSeq/UShortSeqTypeSupportImpl.h: CorbaSeq/UShortSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/UShortSeq.idl


GENERATED_DIRTY += CorbaSeq/WCharSeqTypeSupportImpl.cpp CorbaSeq/WCharSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/WCharSeq.idl" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/WCharSeq.idl" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WCharSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/WCharSeqTypeSupportImpl.cpp CorbaSeq/WCharSeqTypeSupportImpl.h: CorbaSeq/WCharSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/WCharSeq.idl


GENERATED_DIRTY += CorbaSeq/WStringSeqTypeSupportImpl.cpp CorbaSeq/WStringSeqTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "CorbaSeq/WStringSeq.idl" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "CorbaSeq/WStringSeq.idl" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "CorbaSeq/WStringSeqTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
CorbaSeq/WStringSeqTypeSupportImpl.cpp CorbaSeq/WStringSeqTypeSupportImpl.h: CorbaSeq/WStringSeq.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(MKDIR) CorbaSeq
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -o CorbaSeq -SI -Wb,tao_include_prefix=tao/ CorbaSeq/WStringSeq.idl


GENERATED_DIRTY += DdsDcpsGuidTypeSupportImpl.cpp DdsDcpsGuidTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsGuidTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsGuidTypeSupportImpl.cpp DdsDcpsGuidTypeSupportImpl.h: DdsDcpsGuid.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SI DdsDcpsGuid.idl


GENERATED_DIRTY += DdsDcpsInfoUtilsTypeSupportImpl.cpp DdsDcpsInfoUtilsTypeSupportImpl.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../bin/opendds_idl)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/CPPTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/HTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,../dds/idl/IDLTemplate.txt)" -nt "DdsDcpsInfoUtilsTypeSupportImpl.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfoUtilsTypeSupportImpl.cpp DdsDcpsInfoUtilsTypeSupportImpl.h: DdsDcpsInfoUtils.idl $(call ADD_ARCH,../bin/opendds_idl) $(call ADD_ARCH,../dds/idl/CPPTemplate.txt) $(call ADD_ARCH,../dds/idl/HTemplate.txt) $(call ADD_ARCH,../dds/idl/IDLTemplate.txt)
	$(if $(findstring ",../bin/opendds_idl),../bin/opendds_idl,$(call ADD_QUOTE,$(call ADD_ARCH,../bin/opendds_idl))) -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SI DdsDcpsInfoUtils.idl


DYLD_LIBRARY_PATH := $(DYLD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LD_LIBRARY_PATH   := $(LD_LIBRARY_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
SHLIB_PATH        := $(SHLIB_PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
LIBPATH           := $(LIBPATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))
PATH              := $(PATH):$(ACE_ROOT)/lib$(if $(ARCH),:$(ACE_ROOT)/lib/$(ARCH))

GENERATED_DIRTY += DdsDcpsInfrastructureTypeSupportS.cpp DdsDcpsInfrastructureTypeSupportC.cpp DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructureTypeSupport.idl" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureTypeSupportS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureTypeSupportS.cpp DdsDcpsInfrastructureTypeSupportC.cpp DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h: DdsDcpsInfrastructureTypeSupport.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. DdsDcpsInfrastructureTypeSupport.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfrastructureTypeSupportS.cpp DdsDcpsInfrastructureTypeSupportC.cpp DdsDcpsInfrastructureTypeSupportC.inl DdsDcpsInfrastructureTypeSupportC.h DdsDcpsInfrastructureTypeSupportS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsInfoUtilsC.cpp DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfoUtils.idl" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfoUtilsS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfoUtilsC.cpp DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h: DdsDcpsInfoUtils.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsInfoUtils.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfoUtilsC.cpp DdsDcpsInfoUtilsC.inl DdsDcpsInfoUtilsC.h DdsDcpsInfoUtilsS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsGuidC.cpp DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsGuid.idl" -nt "DdsDcpsGuidS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsGuidS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsGuidS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsGuidC.cpp DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h: DdsDcpsGuid.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsGuid.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsGuidC.cpp DdsDcpsGuidC.inl DdsDcpsGuidC.h DdsDcpsGuidS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsC.cpp DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "DdsDcps.idl" -nt "DdsDcpsS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsC.cpp DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h: DdsDcps.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcps.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsC.cpp DdsDcpsC.inl DdsDcpsC.h DdsDcpsS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsInfrastructureC.cpp DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsInfrastructure.idl" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsInfrastructureS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsInfrastructureC.cpp DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h: DdsDcpsInfrastructure.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsInfrastructure.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsInfrastructureC.cpp DdsDcpsInfrastructureC.inl DdsDcpsInfrastructureC.h DdsDcpsInfrastructureS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsDomainC.cpp DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsDomain.idl" -nt "DdsDcpsDomainS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsDomainS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsDomainS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsDomainC.cpp DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h: DdsDcpsDomain.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsDomain.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsDomainC.cpp DdsDcpsDomainC.inl DdsDcpsDomainC.h DdsDcpsDomainS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsPublicationC.cpp DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsPublication.idl" -nt "DdsDcpsPublicationS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsPublicationS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsPublicationC.cpp DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h: DdsDcpsPublication.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsPublication.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsPublicationC.cpp DdsDcpsPublicationC.inl DdsDcpsPublicationC.h DdsDcpsPublicationS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsSubscriptionC.cpp DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscription.idl" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsSubscriptionC.cpp DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h: DdsDcpsSubscription.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsSubscription.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsSubscriptionC.cpp DdsDcpsSubscriptionC.inl DdsDcpsSubscriptionC.h DdsDcpsSubscriptionS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsTopicC.cpp DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTopic.idl" -nt "DdsDcpsTopicS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTopicS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTopicS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsTopicC.cpp DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h: DdsDcpsTopic.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsTopic.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsTopicC.cpp DdsDcpsTopicC.inl DdsDcpsTopicC.h DdsDcpsTopicS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsSubscriptionExtC.cpp DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsSubscriptionExt.idl" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsSubscriptionExtS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsSubscriptionExtC.cpp DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h: DdsDcpsSubscriptionExt.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsSubscriptionExt.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsSubscriptionExtC.cpp DdsDcpsSubscriptionExtC.inl DdsDcpsSubscriptionExtC.h DdsDcpsSubscriptionExtS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

GENERATED_DIRTY += DdsDcpsTypeSupportExtC.cpp DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h
OBJS_DEPEND_ON_GENERATED = 1
## More than one file is generated by the command and therefore
## it can not be run in parallel.  Unfortunately, there is no way to
## say that only this rule can't be run in parallel.  However, we can
## determine if the generated files have already been generated.  If that's
## the case, then we don't need this special rule.
ifeq ($(wildcard $(GENERATED_DIRTY)), $(GENERATED_DIRTY))
  ## If we can find /bin/test, then we will continue
  ifneq ($(TEST_EXE),)
    ## If all of the generated files are there, then we need to check
    ## and make sure that the generated files are up-to-date.  If they are not
    ## then we need the special rule.
    ifeq ($(shell $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "DdsDcpsTypeSupportExt.idl" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || echo 0),)
      .NOTPARALLEL:

    else
      ## By this point, all of the generated files are here and up-to-date
      ## with respect to the source file.  Now we need to make sure that
      ## they are up-to-date with respect to the generation tool.  If the tool
      ## is newer than the generated files, then we need the special rule.
      ifeq ($(shell $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(TAO_IDL_DEP))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.cpp" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.inl" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtC.h" 2> /dev/null || $(TEST_EXE) "$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT))" -nt "DdsDcpsTypeSupportExtS.h" 2> /dev/null || echo 0),)
        .NOTPARALLEL:
      endif
    endif
  else
    .NOTPARALLEL:
  endif
else
.NOTPARALLEL:
endif
DdsDcpsTypeSupportExtC.cpp DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h: DdsDcpsTypeSupportExt.idl $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(TAO_IDL_DEP)))
	$(if $(findstring ",$(TAO_IDL)),$(TAO_IDL),$(call ADD_QUOTE,$(call ADD_ARCH,$(TAO_IDL)))) $(TAO_IDLFLAGS) -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -I.. -Sa -St -Wb,pch_include=DCPS/DdsDcps_pch.h -Wb,export_macro=OpenDDS_Dcps_Export -Wb,export_include=dds/DCPS/dcps_export.h -SS -I.. DdsDcpsTypeSupportExt.idl


ifneq ($(static_libs_only),1)
ifneq ($(CROSS-COMPILE),1)
DdsDcpsTypeSupportExtC.cpp DdsDcpsTypeSupportExtC.inl DdsDcpsTypeSupportExtC.h DdsDcpsTypeSupportExtS.h: $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_BE.$(SOEXT))) $(subst $(SPACE),\$(SPACE),$(call ADD_ARCH,$(ACE_ROOT)/lib/$(LIB_PREFIX)TAO_IDL_FE.$(SOEXT)))
endif
endif

ifneq ($(GENERATED_DIRTY),)
.PRECIOUS: $(GENERATED_DIRTY)
all: $(GENERATED_DIRTY)
endif

ADDITIONAL_IDL_TARGETS += DdsDcpsInfrastructureTypeSupport$(IDL_CLIENT_HDR_EXT) DdsDcpsInfoUtils$(IDL_CLIENT_HDR_EXT) DdsDcpsGuid$(IDL_CLIENT_HDR_EXT) DdsDcps$(IDL_CLIENT_HDR_EXT) DdsDcpsInfrastructure$(IDL_CLIENT_HDR_EXT) DdsDcpsDomain$(IDL_CLIENT_HDR_EXT) DdsDcpsPublication$(IDL_CLIENT_HDR_EXT) DdsDcpsSubscription$(IDL_CLIENT_HDR_EXT) DdsDcpsTopic$(IDL_CLIENT_HDR_EXT) DdsDcpsSubscriptionExt$(IDL_CLIENT_HDR_EXT) DdsDcpsTypeSupportExt$(IDL_CLIENT_HDR_EXT)
idl_stubs: $(ADDITIONAL_IDL_TARGETS)


realclean: clean
ifneq ($(GENERATED_DIRTY),)
	-$(RM) -r $(GENERATED_DIRTY)
endif

__prebuild__:
	@-:


.PHONY: install
install: all
INSTALL_LIB ?= lib
ifneq ($(INSTALL_PREFIX),)
ifneq ($(install_rpath),0)
LDFLAGS += -Wl,-R$(INSTALL_PREFIX)/$(INSTALL_LIB) $(LD_RPATH_FLAGS)
endif
endif

PRJINST_OPTIONS ?=
INST_DIR ?= /$(notdir $(PWD))
COMMA = ,
SPACE = $(should_be_unset) $(should_be_unset)
INSTALLER ?= $(MPC_ROOT)/prj_install.pl
CUSTOM_INST_TAGS = $(sort  typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files typesupport_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files idl_files )

INST_TAGS = $(CUSTOM_INST_TAGS)
INST_LOCATIONS = $(foreach tag,$(INST_TAGS),-b $(tag)=include$(INST_DIR))

DATA_INST_TAGS = 
INST_LOCATIONS += $(if $(DATA_INST_TAGS),-x installdata_files -b installdata_files=share$(INST_DIR))
INST_TAGS := $(INST_TAGS)$(if $(DATA_INST_TAGS), $(DATA_INST_TAGS))

ifeq ($(INSTALLER),/prj_install.pl)
INSTALLER = $(ACE_ROOT)/MPC/prj_install.pl
endif

ifeq ($(LIBCHECK),1)
install:
ifeq ($(INST_TAGS),)
	@echo Nothing to install.
else
ifeq ($(INSTALL_PREFIX),)
	@echo The variable INSTALL_PREFIX must be set to install.
	@echo If binaries are already built and you want to use RPATH,
	@echo they must be rebuilt after changing INSTALL_PREFIX.
	@false
else
	perl -ne'if (/^#END MPC-Generated Install Info/) {exit 0}' \
	  -e'elsif (/^#BEGIN MPC-Generated Install Info/) {$$ok=1}' \
	  -e'elsif ($$ok && s/^#//) {print}' $(MAKEFILE) | \
	$(INSTALLER) -i -s $(subst $(SPACE),$(COMMA),$(INST_TAGS)) \
	  $(INST_LOCATIONS) $(if $(ARCH),-d $(ARCH)) $(PRJINST_OPTIONS) \
	  $(DESTDIR)$(INSTALL_PREFIX)
endif
endif
endif

#BEGIN MPC-Generated Install Info
#typesupport_files:
#DdsDcpsInfrastructure.idl
#CorbaSeq/BooleanSeq.idl CorbaSeq
#CorbaSeq/CharSeq.idl CorbaSeq
#CorbaSeq/DoubleSeq.idl CorbaSeq
#CorbaSeq/FloatSeq.idl CorbaSeq
#CorbaSeq/LongDoubleSeq.idl CorbaSeq
#CorbaSeq/LongLongSeq.idl CorbaSeq
#CorbaSeq/LongSeq.idl CorbaSeq
#CorbaSeq/OctetSeq.idl CorbaSeq
#CorbaSeq/ShortSeq.idl CorbaSeq
#CorbaSeq/StringSeq.idl CorbaSeq
#CorbaSeq/ULongLongSeq.idl CorbaSeq
#CorbaSeq/ULongSeq.idl CorbaSeq
#CorbaSeq/UShortSeq.idl CorbaSeq
#CorbaSeq/WCharSeq.idl CorbaSeq
#CorbaSeq/WStringSeq.idl CorbaSeq
#DdsDcpsGuid.idl
#DdsDcpsInfoUtils.idl
#
#build_files:
#DdsDcps.mpc
#dcps_bits_source.mpb
#dcps_bits.mpb
#
#idl_files:
#DdsDcpsInfrastructureTypeSupport.idl
#DdsDcpsInfoUtils.idl
#DdsDcpsGuid.idl
#DdsDcps.idl
#DdsDcpsInfrastructure.idl
#DdsDcpsDomain.idl
#DdsDcpsPublication.idl
#DdsDcpsSubscription.idl
#DdsDcpsTopic.idl
#DdsDcpsSubscriptionExt.idl
#DdsDcpsTypeSupportExt.idl
#

#END MPC-Generated Install Info

idl_stubs: DdsDcpsGuidTypeSupportImpl.cpp DdsDcpsInfoUtilsTypeSupportImpl.cpp CorbaSeq/BooleanSeqTypeSupportImpl.cpp CorbaSeq/CharSeqTypeSupportImpl.cpp CorbaSeq/DoubleSeqTypeSupportImpl.cpp CorbaSeq/FloatSeqTypeSupportImpl.cpp CorbaSeq/LongDoubleSeqTypeSupportImpl.cpp CorbaSeq/LongLongSeqTypeSupportImpl.cpp CorbaSeq/LongSeqTypeSupportImpl.cpp CorbaSeq/OctetSeqTypeSupportImpl.cpp CorbaSeq/ShortSeqTypeSupportImpl.cpp CorbaSeq/StringSeqTypeSupportImpl.cpp CorbaSeq/ULongLongSeqTypeSupportImpl.cpp CorbaSeq/ULongSeqTypeSupportImpl.cpp CorbaSeq/UShortSeqTypeSupportImpl.cpp CorbaSeq/WCharSeqTypeSupportImpl.cpp CorbaSeq/WStringSeqTypeSupportImpl.cpp

