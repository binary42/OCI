/* -*- C++ -*- */
/* Generated by ../bin/opendds_idl version 3.6 (ACE version 6.2a_p7) running on input file DdsDcpsGuid.idl*/
#ifndef OPENDDS_IDL_GENERATED_DDSDCPSGUIDTYPESUPPORTIMPL_H_QBXOPG
#define OPENDDS_IDL_GENERATED_DDSDCPSGUIDTYPESUPPORTIMPL_H_QBXOPG
#include "dds/DCPS/Definitions.h"
#include "DdsDcpsGuidC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DCPS/dcps_export.h"


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::GuidVendorId_t_forany& arr, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::GuidVendorId_t_forany& arr);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::GuidVendorId_t_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GuidVendorId_t_forany*);

}  }

#endif

/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::GuidPrefix_t_forany& arr, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::GuidPrefix_t_forany& arr);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::GuidPrefix_t_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GuidPrefix_t_forany*);

}  }

#endif

/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::EntityKey_t_forany& arr, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::EntityKey_t_forany& arr);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::EntityKey_t_forany& arr);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::EntityKey_t_forany*);

}  }

#endif

/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::EntityId_t& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::EntityId_t& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::EntityId_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::EntityId_t>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::EntityId_t*);

}  }

#endif

/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::GUID_t& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::GUID_t& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::GUID_t& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::GUID_t>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GUID_t*);

}  }

#endif

/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::GUIDSeq& seq, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::GUIDSeq& seq);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::GUIDSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GUIDSeq*);

}  }

#endif

/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_DDSDCPSGUIDTYPESUPPORTIMPL_H_QBXOPG */
