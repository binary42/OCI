// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376

#include "DCPS/DdsDcps_pch.h"
#include "DdsDcpsSubscriptionC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DdsDcpsSubscriptionC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_DDS_DATAREADERSEQ_CS_)
#define _DDS_DATAREADERSEQ_CS_

DDS::DataReaderSeq::DataReaderSeq (void)
{}

DDS::DataReaderSeq::DataReaderSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_object_reference_sequence<
        DataReader,
        DataReader_var
      > (max)
{}

DDS::DataReaderSeq::DataReaderSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    DDS::DataReader_ptr * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_object_reference_sequence<
        DataReader,
        DataReader_var
      >
    (max, length, buffer, release)
{}

DDS::DataReaderSeq::DataReaderSeq (
    const DataReaderSeq &seq)
  : ::TAO::unbounded_object_reference_sequence<
        DataReader,
        DataReader_var
      > (seq)
{}

DDS::DataReaderSeq::~DataReaderSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::DataReaderListener.

DDS::DataReaderListener_ptr
TAO::Objref_Traits<DDS::DataReaderListener>::duplicate (
    DDS::DataReaderListener_ptr p)
{
  return DDS::DataReaderListener::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::DataReaderListener>::release (
    DDS::DataReaderListener_ptr p)
{
  ::CORBA::release (p);
}

DDS::DataReaderListener_ptr
TAO::Objref_Traits<DDS::DataReaderListener>::nil (void)
{
  return DDS::DataReaderListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::DataReaderListener>::marshal (
    const DDS::DataReaderListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::DataReaderListener::DataReaderListener (void)
{}

DDS::DataReaderListener::~DataReaderListener (void)
{
}

DDS::DataReaderListener_ptr
DDS::DataReaderListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderListener::_duplicate (
      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    );
}

DDS::DataReaderListener_ptr
DDS::DataReaderListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderListener::_duplicate (
      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    );
}

DDS::DataReaderListener_ptr
DDS::DataReaderListener::_nil (void)
{
  return 0;
}

DDS::DataReaderListener_ptr
DDS::DataReaderListener::_duplicate (DataReaderListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::DataReaderListener::_tao_release (DataReaderListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::DataReaderListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReaderListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::DataReaderListener::_interface_repository_id (void) const
{
  return "IDL:DDS/DataReaderListener:1.0";
}

::CORBA::Boolean
DDS::DataReaderListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::SubscriberListener.

DDS::SubscriberListener_ptr
TAO::Objref_Traits<DDS::SubscriberListener>::duplicate (
    DDS::SubscriberListener_ptr p)
{
  return DDS::SubscriberListener::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::SubscriberListener>::release (
    DDS::SubscriberListener_ptr p)
{
  ::CORBA::release (p);
}

DDS::SubscriberListener_ptr
TAO::Objref_Traits<DDS::SubscriberListener>::nil (void)
{
  return DDS::SubscriberListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::SubscriberListener>::marshal (
    const DDS::SubscriberListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::SubscriberListener::SubscriberListener (void)
{}

DDS::SubscriberListener::~SubscriberListener (void)
{
}

DDS::SubscriberListener_ptr
DDS::SubscriberListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SubscriberListener::_duplicate (
      dynamic_cast<SubscriberListener_ptr> (_tao_objref)
    );
}

DDS::SubscriberListener_ptr
DDS::SubscriberListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return SubscriberListener::_duplicate (
      dynamic_cast<SubscriberListener_ptr> (_tao_objref)
    );
}

DDS::SubscriberListener_ptr
DDS::SubscriberListener::_nil (void)
{
  return 0;
}

DDS::SubscriberListener_ptr
DDS::SubscriberListener::_duplicate (SubscriberListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::SubscriberListener::_tao_release (SubscriberListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::SubscriberListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReaderListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/SubscriberListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::SubscriberListener::_interface_repository_id (void) const
{
  return "IDL:DDS/SubscriberListener:1.0";
}

::CORBA::Boolean
DDS::SubscriberListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::ReadCondition.

DDS::ReadCondition_ptr
TAO::Objref_Traits<DDS::ReadCondition>::duplicate (
    DDS::ReadCondition_ptr p)
{
  return DDS::ReadCondition::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::ReadCondition>::release (
    DDS::ReadCondition_ptr p)
{
  ::CORBA::release (p);
}

DDS::ReadCondition_ptr
TAO::Objref_Traits<DDS::ReadCondition>::nil (void)
{
  return DDS::ReadCondition::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::ReadCondition>::marshal (
    const DDS::ReadCondition_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::ReadCondition::ReadCondition (void)
{}

DDS::ReadCondition::~ReadCondition (void)
{
}

DDS::ReadCondition_ptr
DDS::ReadCondition::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ReadCondition::_duplicate (
      dynamic_cast<ReadCondition_ptr> (_tao_objref)
    );
}

DDS::ReadCondition_ptr
DDS::ReadCondition::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return ReadCondition::_duplicate (
      dynamic_cast<ReadCondition_ptr> (_tao_objref)
    );
}

DDS::ReadCondition_ptr
DDS::ReadCondition::_nil (void)
{
  return 0;
}

DDS::ReadCondition_ptr
DDS::ReadCondition::_duplicate (ReadCondition_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::ReadCondition::_tao_release (ReadCondition_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::ReadCondition::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Condition:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/ReadCondition:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::ReadCondition::_interface_repository_id (void) const
{
  return "IDL:DDS/ReadCondition:1.0";
}

::CORBA::Boolean
DDS::ReadCondition::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::QueryCondition.

DDS::QueryCondition_ptr
TAO::Objref_Traits<DDS::QueryCondition>::duplicate (
    DDS::QueryCondition_ptr p)
{
  return DDS::QueryCondition::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::QueryCondition>::release (
    DDS::QueryCondition_ptr p)
{
  ::CORBA::release (p);
}

DDS::QueryCondition_ptr
TAO::Objref_Traits<DDS::QueryCondition>::nil (void)
{
  return DDS::QueryCondition::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::QueryCondition>::marshal (
    const DDS::QueryCondition_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::QueryCondition::QueryCondition (void)
{}

DDS::QueryCondition::~QueryCondition (void)
{
}

DDS::QueryCondition_ptr
DDS::QueryCondition::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QueryCondition::_duplicate (
      dynamic_cast<QueryCondition_ptr> (_tao_objref)
    );
}

DDS::QueryCondition_ptr
DDS::QueryCondition::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return QueryCondition::_duplicate (
      dynamic_cast<QueryCondition_ptr> (_tao_objref)
    );
}

DDS::QueryCondition_ptr
DDS::QueryCondition::_nil (void)
{
  return 0;
}

DDS::QueryCondition_ptr
DDS::QueryCondition::_duplicate (QueryCondition_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::QueryCondition::_tao_release (QueryCondition_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::QueryCondition::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Condition:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/ReadCondition:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/QueryCondition:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::QueryCondition::_interface_repository_id (void) const
{
  return "IDL:DDS/QueryCondition:1.0";
}

::CORBA::Boolean
DDS::QueryCondition::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::DataReader.

DDS::DataReader_ptr
TAO::Objref_Traits<DDS::DataReader>::duplicate (
    DDS::DataReader_ptr p)
{
  return DDS::DataReader::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::DataReader>::release (
    DDS::DataReader_ptr p)
{
  ::CORBA::release (p);
}

DDS::DataReader_ptr
TAO::Objref_Traits<DDS::DataReader>::nil (void)
{
  return DDS::DataReader::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::DataReader>::marshal (
    const DDS::DataReader_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::DataReader::DataReader (void)
{}

DDS::DataReader::~DataReader (void)
{
}

DDS::DataReader_ptr
DDS::DataReader::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReader::_duplicate (
      dynamic_cast<DataReader_ptr> (_tao_objref)
    );
}

DDS::DataReader_ptr
DDS::DataReader::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReader::_duplicate (
      dynamic_cast<DataReader_ptr> (_tao_objref)
    );
}

DDS::DataReader_ptr
DDS::DataReader::_nil (void)
{
  return 0;
}

DDS::DataReader_ptr
DDS::DataReader::_duplicate (DataReader_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::DataReader::_tao_release (DataReader_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::DataReader::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::DataReader::_interface_repository_id (void) const
{
  return "IDL:DDS/DataReader:1.0";
}

::CORBA::Boolean
DDS::DataReader::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for DDS::Subscriber.

DDS::Subscriber_ptr
TAO::Objref_Traits<DDS::Subscriber>::duplicate (
    DDS::Subscriber_ptr p)
{
  return DDS::Subscriber::_duplicate (p);
}

void
TAO::Objref_Traits<DDS::Subscriber>::release (
    DDS::Subscriber_ptr p)
{
  ::CORBA::release (p);
}

DDS::Subscriber_ptr
TAO::Objref_Traits<DDS::Subscriber>::nil (void)
{
  return DDS::Subscriber::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<DDS::Subscriber>::marshal (
    const DDS::Subscriber_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

DDS::Subscriber::Subscriber (void)
{}

DDS::Subscriber::~Subscriber (void)
{
}

DDS::Subscriber_ptr
DDS::Subscriber::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Subscriber::_duplicate (
      dynamic_cast<Subscriber_ptr> (_tao_objref)
    );
}

DDS::Subscriber_ptr
DDS::Subscriber::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return Subscriber::_duplicate (
      dynamic_cast<Subscriber_ptr> (_tao_objref)
    );
}

DDS::Subscriber_ptr
DDS::Subscriber::_nil (void)
{
  return 0;
}

DDS::Subscriber_ptr
DDS::Subscriber::_duplicate (Subscriber_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
DDS::Subscriber::_tao_release (Subscriber_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
DDS::Subscriber::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Subscriber:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* DDS::Subscriber::_interface_repository_id (void) const
{
  return "IDL:DDS/Subscriber:1.0";
}

::CORBA::Boolean
DDS::Subscriber::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

