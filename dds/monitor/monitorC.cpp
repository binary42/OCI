// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376


#include "monitorC.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "monitorC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

OpenDDS::DCPS::ValueUnion::ValueUnion (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (OpenDDS::DCPS::ValueEnumType) -1;
}

OpenDDS::DCPS::ValueUnion::ValueUnion (const ::OpenDDS::DCPS::ValueUnion &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case OpenDDS::DCPS::INTEGER_TYPE:
    {
      this->u_.integer_value_ = u.u_.integer_value_;
    }
    break;
    case OpenDDS::DCPS::DOUBLE_TYPE:
    {
      this->u_.double_value_ = u.u_.double_value_;
    }
    break;
    case OpenDDS::DCPS::STRING_TYPE:
    {
      this->u_.string_value_ = ::CORBA::string_dup (u.u_.string_value_);
    }
    break;
    case OpenDDS::DCPS::STATISTICS_TYPE:
    {
      this->u_.stat_value_ = u.u_.stat_value_;
    }
    break;
    case OpenDDS::DCPS::STRING_LIST_TYPE:
    {
      if (u.u_.string_seq_value_ == 0)
        {
          this->u_.string_seq_value_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.string_seq_value_,
              DDS::StringSeq (*u.u_.string_seq_value_)
            );
        }
    }
    break;
    default:
    break;
  }
}

OpenDDS::DCPS::ValueUnion::~ValueUnion (void)
{
  // Finalize.
  this->_reset ();
}

OpenDDS::DCPS::ValueUnion &
OpenDDS::DCPS::ValueUnion::operator= (const ::OpenDDS::DCPS::ValueUnion &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case OpenDDS::DCPS::INTEGER_TYPE:
    {
      this->u_.integer_value_ = u.u_.integer_value_;
    }
    break;
    case OpenDDS::DCPS::DOUBLE_TYPE:
    {
      this->u_.double_value_ = u.u_.double_value_;
    }
    break;
    case OpenDDS::DCPS::STRING_TYPE:
    {
      this->u_.string_value_ = ::CORBA::string_dup (u.u_.string_value_);
    }
    break;
    case OpenDDS::DCPS::STATISTICS_TYPE:
    {
      this->u_.stat_value_ = u.u_.stat_value_;
    }
    break;
    case OpenDDS::DCPS::STRING_LIST_TYPE:
    {
      if (u.u_.string_seq_value_ == 0)
        {
          this->u_.string_seq_value_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.string_seq_value_,
              DDS::StringSeq (*u.u_.string_seq_value_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void OpenDDS::DCPS::ValueUnion::_reset (void)
{
  switch (this->disc_)
  {
    
    case OpenDDS::DCPS::INTEGER_TYPE:
      break;
    case OpenDDS::DCPS::DOUBLE_TYPE:
      break;
    case OpenDDS::DCPS::STRING_TYPE:
      ::CORBA::string_free (this->u_.string_value_);
      this->u_.string_value_ = 0;
      break;
    case OpenDDS::DCPS::STATISTICS_TYPE:
      break;
    case OpenDDS::DCPS::STRING_LIST_TYPE:
      delete this->u_.string_seq_value_;
      this->u_.string_seq_value_ = 0;
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_NVPSEQ_CS_)
#define _OPENDDS_DCPS_NVPSEQ_CS_

OpenDDS::DCPS::NVPSeq::NVPSeq (void)
{}

OpenDDS::DCPS::NVPSeq::NVPSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      > (max)
{}

OpenDDS::DCPS::NVPSeq::NVPSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::NameValuePair * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::NVPSeq::NVPSeq (
    const NVPSeq &seq)
  : ::TAO::unbounded_value_sequence<
        NameValuePair
      > (seq)
{}

OpenDDS::DCPS::NVPSeq::~NVPSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_DWASSOCIATIONS_CS_)
#define _OPENDDS_DCPS_DWASSOCIATIONS_CS_

OpenDDS::DCPS::DWAssociations::DWAssociations (void)
{}

OpenDDS::DCPS::DWAssociations::DWAssociations (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociation
      > (max)
{}

OpenDDS::DCPS::DWAssociations::DWAssociations (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::DataWriterAssociation * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociation
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::DWAssociations::DWAssociations (
    const DWAssociations &seq)
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociation
      > (seq)
{}

OpenDDS::DCPS::DWAssociations::~DWAssociations (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_DWASSOCIATIONSPERIODIC_CS_)
#define _OPENDDS_DCPS_DWASSOCIATIONSPERIODIC_CS_

OpenDDS::DCPS::DWAssociationsPeriodic::DWAssociationsPeriodic (void)
{}

OpenDDS::DCPS::DWAssociationsPeriodic::DWAssociationsPeriodic (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociationPeriodic
      > (max)
{}

OpenDDS::DCPS::DWAssociationsPeriodic::DWAssociationsPeriodic (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::DataWriterAssociationPeriodic * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociationPeriodic
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::DWAssociationsPeriodic::DWAssociationsPeriodic (
    const DWAssociationsPeriodic &seq)
  : ::TAO::unbounded_value_sequence<
        DataWriterAssociationPeriodic
      > (seq)
{}

OpenDDS::DCPS::DWAssociationsPeriodic::~DWAssociationsPeriodic (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_DRASSOCIATIONS_CS_)
#define _OPENDDS_DCPS_DRASSOCIATIONS_CS_

OpenDDS::DCPS::DRAssociations::DRAssociations (void)
{}

OpenDDS::DCPS::DRAssociations::DRAssociations (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociation
      > (max)
{}

OpenDDS::DCPS::DRAssociations::DRAssociations (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::DataReaderAssociation * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociation
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::DRAssociations::DRAssociations (
    const DRAssociations &seq)
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociation
      > (seq)
{}

OpenDDS::DCPS::DRAssociations::~DRAssociations (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_DRASSOCIATIONSPERIODIC_CS_)
#define _OPENDDS_DCPS_DRASSOCIATIONSPERIODIC_CS_

OpenDDS::DCPS::DRAssociationsPeriodic::DRAssociationsPeriodic (void)
{}

OpenDDS::DCPS::DRAssociationsPeriodic::DRAssociationsPeriodic (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociationPeriodic
      > (max)
{}

OpenDDS::DCPS::DRAssociationsPeriodic::DRAssociationsPeriodic (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::DataReaderAssociationPeriodic * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociationPeriodic
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::DRAssociationsPeriodic::DRAssociationsPeriodic (
    const DRAssociationsPeriodic &seq)
  : ::TAO::unbounded_value_sequence<
        DataReaderAssociationPeriodic
      > (seq)
{}

OpenDDS::DCPS::DRAssociationsPeriodic::~DRAssociationsPeriodic (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_union/union_cs.cpp:79

OpenDDS::DCPS::GenericReport::GenericReport (void)
{
  ACE_OS::memset (&this->u_, 0, sizeof (this->u_));
  this->disc_ = (OpenDDS::DCPS::ReportType) -1;
}

OpenDDS::DCPS::GenericReport::GenericReport (const ::OpenDDS::DCPS::GenericReport &u)
{
  this->disc_ = u.disc_;
  switch (this->disc_)
  {
    case OpenDDS::DCPS::SERVICE_PARTICIPANT_REPORT_TYPE:
    {
      if (u.u_.sp_report_ == 0)
        {
          this->u_.sp_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.sp_report_,
              OpenDDS::DCPS::ServiceParticipantReport (*u.u_.sp_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::DOMAIN_PARTICIPANT_REPORT_TYPE:
    {
      if (u.u_.dp_report_ == 0)
        {
          this->u_.dp_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.dp_report_,
              OpenDDS::DCPS::DomainParticipantReport (*u.u_.dp_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::TOPIC_REPORT_TYPE:
    {
      if (u.u_.topic_report_ == 0)
        {
          this->u_.topic_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.topic_report_,
              OpenDDS::DCPS::TopicReport (*u.u_.topic_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::PUBLISHER_REPORT_TYPE:
    {
      if (u.u_.publisher_report_ == 0)
        {
          this->u_.publisher_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.publisher_report_,
              OpenDDS::DCPS::PublisherReport (*u.u_.publisher_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::SUBSCRIBER_REPORT_TYPE:
    {
      if (u.u_.subscriber_report_ == 0)
        {
          this->u_.subscriber_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.subscriber_report_,
              OpenDDS::DCPS::SubscriberReport (*u.u_.subscriber_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_WRITER_REPORT_TYPE:
    {
      if (u.u_.dw_report_ == 0)
        {
          this->u_.dw_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.dw_report_,
              OpenDDS::DCPS::DataWriterReport (*u.u_.dw_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_WRITER_PERIODIC_REPORT_TYPE:
    {
      if (u.u_.dw_per_report_ == 0)
        {
          this->u_.dw_per_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.dw_per_report_,
              OpenDDS::DCPS::DataWriterPeriodicReport (*u.u_.dw_per_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_READER_REPORT_TYPE:
    {
      if (u.u_.dr_report_ == 0)
        {
          this->u_.dr_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.dr_report_,
              OpenDDS::DCPS::DataReaderReport (*u.u_.dr_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_READER_PERIODIC_REPORT_TYPE:
    {
      if (u.u_.dr_per_report_ == 0)
        {
          this->u_.dr_per_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.dr_per_report_,
              OpenDDS::DCPS::DataReaderPeriodicReport (*u.u_.dr_per_report_)
            );
        }
    }
    break;
    case OpenDDS::DCPS::TRANSPORT_REPORT_TYPE:
    {
      if (u.u_.transport_report_ == 0)
        {
          this->u_.transport_report_ = 0;
        }
      else
        {
          ACE_NEW (
              this->u_.transport_report_,
              OpenDDS::DCPS::TransportReport (*u.u_.transport_report_)
            );
        }
    }
    break;
    default:
    break;
  }
}

OpenDDS::DCPS::GenericReport::~GenericReport (void)
{
  // Finalize.
  this->_reset ();
}

OpenDDS::DCPS::GenericReport &
OpenDDS::DCPS::GenericReport::operator= (const ::OpenDDS::DCPS::GenericReport &u)
{
  if (&u == this)
    {
      return *this;
    }
  
  this->_reset ();
  this->disc_ = u.disc_;

  switch (this->disc_)
  {
    case OpenDDS::DCPS::SERVICE_PARTICIPANT_REPORT_TYPE:
    {
      if (u.u_.sp_report_ == 0)
        {
          this->u_.sp_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.sp_report_,
              OpenDDS::DCPS::ServiceParticipantReport (*u.u_.sp_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::DOMAIN_PARTICIPANT_REPORT_TYPE:
    {
      if (u.u_.dp_report_ == 0)
        {
          this->u_.dp_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.dp_report_,
              OpenDDS::DCPS::DomainParticipantReport (*u.u_.dp_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::TOPIC_REPORT_TYPE:
    {
      if (u.u_.topic_report_ == 0)
        {
          this->u_.topic_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.topic_report_,
              OpenDDS::DCPS::TopicReport (*u.u_.topic_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::PUBLISHER_REPORT_TYPE:
    {
      if (u.u_.publisher_report_ == 0)
        {
          this->u_.publisher_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.publisher_report_,
              OpenDDS::DCPS::PublisherReport (*u.u_.publisher_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::SUBSCRIBER_REPORT_TYPE:
    {
      if (u.u_.subscriber_report_ == 0)
        {
          this->u_.subscriber_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.subscriber_report_,
              OpenDDS::DCPS::SubscriberReport (*u.u_.subscriber_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_WRITER_REPORT_TYPE:
    {
      if (u.u_.dw_report_ == 0)
        {
          this->u_.dw_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.dw_report_,
              OpenDDS::DCPS::DataWriterReport (*u.u_.dw_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_WRITER_PERIODIC_REPORT_TYPE:
    {
      if (u.u_.dw_per_report_ == 0)
        {
          this->u_.dw_per_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.dw_per_report_,
              OpenDDS::DCPS::DataWriterPeriodicReport (*u.u_.dw_per_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_READER_REPORT_TYPE:
    {
      if (u.u_.dr_report_ == 0)
        {
          this->u_.dr_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.dr_report_,
              OpenDDS::DCPS::DataReaderReport (*u.u_.dr_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::DATA_READER_PERIODIC_REPORT_TYPE:
    {
      if (u.u_.dr_per_report_ == 0)
        {
          this->u_.dr_per_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.dr_per_report_,
              OpenDDS::DCPS::DataReaderPeriodicReport (*u.u_.dr_per_report_),
              *this
            );
        }
    }
    break;
    case OpenDDS::DCPS::TRANSPORT_REPORT_TYPE:
    {
      if (u.u_.transport_report_ == 0)
        {
          this->u_.transport_report_ = 0;
        }
      else
        {
          ACE_NEW_RETURN (
              this->u_.transport_report_,
              OpenDDS::DCPS::TransportReport (*u.u_.transport_report_),
              *this
            );
        }
    }
    break;
    default:
    break;
  }

  return *this;
}

/// Reset method to reset old values of a union.
void OpenDDS::DCPS::GenericReport::_reset (void)
{
  switch (this->disc_)
  {
    
    case OpenDDS::DCPS::SERVICE_PARTICIPANT_REPORT_TYPE:
      delete this->u_.sp_report_;
      this->u_.sp_report_ = 0;
      break;
    case OpenDDS::DCPS::DOMAIN_PARTICIPANT_REPORT_TYPE:
      delete this->u_.dp_report_;
      this->u_.dp_report_ = 0;
      break;
    case OpenDDS::DCPS::TOPIC_REPORT_TYPE:
      delete this->u_.topic_report_;
      this->u_.topic_report_ = 0;
      break;
    case OpenDDS::DCPS::PUBLISHER_REPORT_TYPE:
      delete this->u_.publisher_report_;
      this->u_.publisher_report_ = 0;
      break;
    case OpenDDS::DCPS::SUBSCRIBER_REPORT_TYPE:
      delete this->u_.subscriber_report_;
      this->u_.subscriber_report_ = 0;
      break;
    case OpenDDS::DCPS::DATA_WRITER_REPORT_TYPE:
      delete this->u_.dw_report_;
      this->u_.dw_report_ = 0;
      break;
    case OpenDDS::DCPS::DATA_WRITER_PERIODIC_REPORT_TYPE:
      delete this->u_.dw_per_report_;
      this->u_.dw_per_report_ = 0;
      break;
    case OpenDDS::DCPS::DATA_READER_REPORT_TYPE:
      delete this->u_.dr_report_;
      this->u_.dr_report_ = 0;
      break;
    case OpenDDS::DCPS::DATA_READER_PERIODIC_REPORT_TYPE:
      delete this->u_.dr_per_report_;
      this->u_.dr_per_report_ = 0;
      break;
    case OpenDDS::DCPS::TRANSPORT_REPORT_TYPE:
      delete this->u_.transport_report_;
      this->u_.transport_report_ = 0;
      break;
    default:
    break;
  }
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for OpenDDS::DCPS::ProcessMonitor.

OpenDDS::DCPS::ProcessMonitor_ptr
TAO::Objref_Traits<OpenDDS::DCPS::ProcessMonitor>::duplicate (
    OpenDDS::DCPS::ProcessMonitor_ptr p)
{
  return OpenDDS::DCPS::ProcessMonitor::_duplicate (p);
}

void
TAO::Objref_Traits<OpenDDS::DCPS::ProcessMonitor>::release (
    OpenDDS::DCPS::ProcessMonitor_ptr p)
{
  ::CORBA::release (p);
}

OpenDDS::DCPS::ProcessMonitor_ptr
TAO::Objref_Traits<OpenDDS::DCPS::ProcessMonitor>::nil (void)
{
  return OpenDDS::DCPS::ProcessMonitor::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OpenDDS::DCPS::ProcessMonitor>::marshal (
    const OpenDDS::DCPS::ProcessMonitor_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::OpenDDS::DCPS::GenericReport *
OpenDDS::DCPS::ProcessMonitor::retrieve_report (
  const char * name)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::OpenDDS::DCPS::GenericReport>::ret_val _tao_retval;
  TAO::Arg_Traits< char *>::in_arg_val _tao_name (name);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_name
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "retrieve_report",
      15,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::ProcessMonitor::enable_report_collection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "enable_report_collection",
      24,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::ProcessMonitor::disable_report_collection (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "disable_report_collection",
      25,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::ProcessMonitor::enable_report_publishing (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "enable_report_publishing",
      24,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::ProcessMonitor::diable_report_publishing (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "diable_report_publishing",
      24,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

void
OpenDDS::DCPS::ProcessMonitor::set_publishing_period (
  const ::DDS::Duration_t & period)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::DDS::Duration_t>::in_arg_val _tao_period (period);

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_period
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "set_publishing_period",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY
      
    );

  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_cs.cpp:91

::DDS::Duration_t
OpenDDS::DCPS::ProcessMonitor::get_publishing_period (
  void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  TAO::Arg_Traits< ::DDS::Duration_t>::ret_val _tao_retval;

  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };

  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "get_publishing_period",
      21,
      TAO::TAO_CO_NONE | TAO::TAO_CO_THRU_POA_STRATEGY,
      TAO::TAO_TWOWAY_INVOCATION
      ,
      TAO::TAO_SYNCHRONOUS_INVOCATION,
      false
    );

  _tao_call.invoke (0, 0);

  return _tao_retval.retn ();
}

OpenDDS::DCPS::ProcessMonitor::ProcessMonitor (void)
{
}

OpenDDS::DCPS::ProcessMonitor::~ProcessMonitor (void)
{
}

OpenDDS::DCPS::ProcessMonitor_ptr
OpenDDS::DCPS::ProcessMonitor::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProcessMonitor>::narrow (
        _tao_objref,
        "IDL:OpenDDS/DCPS/ProcessMonitor:1.0");
}

OpenDDS::DCPS::ProcessMonitor_ptr
OpenDDS::DCPS::ProcessMonitor::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return
    TAO::Narrow_Utils<ProcessMonitor>::unchecked_narrow (
        _tao_objref);
}

OpenDDS::DCPS::ProcessMonitor_ptr
OpenDDS::DCPS::ProcessMonitor::_nil (void)
{
  return 0;
}

OpenDDS::DCPS::ProcessMonitor_ptr
OpenDDS::DCPS::ProcessMonitor::_duplicate (ProcessMonitor_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OpenDDS::DCPS::ProcessMonitor::_tao_release (ProcessMonitor_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OpenDDS::DCPS::ProcessMonitor::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/ProcessMonitor:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* OpenDDS::DCPS::ProcessMonitor::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/ProcessMonitor:1.0";
}

::CORBA::Boolean
OpenDDS::DCPS::ProcessMonitor::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::Statistics &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.n) &&
    (strm << _tao_aggregate.maximum) &&
    (strm << _tao_aggregate.minimum) &&
    (strm << _tao_aggregate.mean) &&
    (strm << _tao_aggregate.variance);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::Statistics &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.n) &&
    (strm >> _tao_aggregate.maximum) &&
    (strm >> _tao_aggregate.minimum) &&
    (strm >> _tao_aggregate.mean) &&
    (strm >> _tao_aggregate.variance);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OpenDDS::DCPS::ValueEnumType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OpenDDS::DCPS::ValueEnumType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OpenDDS::DCPS::ValueEnumType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::ValueUnion &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case OpenDDS::DCPS::INTEGER_TYPE:
      {
        result = strm << _tao_union.integer_value ();
      }
      break;
    case OpenDDS::DCPS::DOUBLE_TYPE:
      {
        result = strm << _tao_union.double_value ();
      }
      break;
    case OpenDDS::DCPS::STRING_TYPE:
      {
        result = strm << _tao_union.string_value ();
      }
      break;
    case OpenDDS::DCPS::STATISTICS_TYPE:
      {
        result = strm << _tao_union.stat_value ();
      }
      break;
    case OpenDDS::DCPS::STRING_LIST_TYPE:
      {
        result = strm << _tao_union.string_seq_value ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::ValueUnion &_tao_union
  )
{
  OpenDDS::DCPS::ValueEnumType _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case OpenDDS::DCPS::INTEGER_TYPE:
      {
        CORBA::Long _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.integer_value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DOUBLE_TYPE:
      {
        CORBA::Double _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.double_value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::STRING_TYPE:
      {
        ::CORBA::String_var _tao_union_tmp;
        result = strm >> _tao_union_tmp.out ();

        if (result)
          {
            _tao_union.string_value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::STATISTICS_TYPE:
      {
        OpenDDS::DCPS::Statistics _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.stat_value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::STRING_LIST_TYPE:
      {
        DDS::StringSeq _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.string_seq_value (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::NameValuePair &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.name.in ()) &&
    (strm << _tao_aggregate.value);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::NameValuePair &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.name.out ()) &&
    (strm >> _tao_aggregate.value);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_NVPSeq_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_NVPSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::NVPSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::NVPSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_NVPSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::ServiceParticipantReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.host.in ()) &&
    (strm << _tao_aggregate.pid) &&
    (strm << _tao_aggregate.domain_participants) &&
    (strm << _tao_aggregate.transports) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::ServiceParticipantReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.host.out ()) &&
    (strm >> _tao_aggregate.pid) &&
    (strm >> _tao_aggregate.domain_participants) &&
    (strm >> _tao_aggregate.transports) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DomainParticipantReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.host.in ()) &&
    (strm << _tao_aggregate.pid) &&
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.domain_id) &&
    (strm << _tao_aggregate.topics) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DomainParticipantReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.host.out ()) &&
    (strm >> _tao_aggregate.pid) &&
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.domain_id) &&
    (strm >> _tao_aggregate.topics) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::TopicReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.topic_id) &&
    (strm << _tao_aggregate.topic_name.in ()) &&
    (strm << _tao_aggregate.type_name.in ()) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::TopicReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.topic_id) &&
    (strm >> _tao_aggregate.topic_name.out ()) &&
    (strm >> _tao_aggregate.type_name.out ()) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::PublisherReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.handle) &&
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.transport_id) &&
    (strm << _tao_aggregate.writers) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::PublisherReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.handle) &&
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.transport_id) &&
    (strm >> _tao_aggregate.writers) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::SubscriberReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.handle) &&
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.transport_id) &&
    (strm << _tao_aggregate.readers) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::SubscriberReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.handle) &&
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.transport_id) &&
    (strm >> _tao_aggregate.readers) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataWriterAssociation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dr_id);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataWriterAssociation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dr_id);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_DWAssociations_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_DWAssociations_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DWAssociations &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DWAssociations &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_DWAssociations_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataWriterReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.pub_handle) &&
    (strm << _tao_aggregate.dw_id) &&
    (strm << _tao_aggregate.topic_id) &&
    (strm << _tao_aggregate.instances) &&
    (strm << _tao_aggregate.associations) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataWriterReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.pub_handle) &&
    (strm >> _tao_aggregate.dw_id) &&
    (strm >> _tao_aggregate.topic_id) &&
    (strm >> _tao_aggregate.instances) &&
    (strm >> _tao_aggregate.associations) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataWriterAssociationPeriodic &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dr_id) &&
    (strm << _tao_aggregate.sequence_number);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataWriterAssociationPeriodic &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dr_id) &&
    (strm >> _tao_aggregate.sequence_number);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_DWAssociationsPeriodic_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_DWAssociationsPeriodic_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DWAssociationsPeriodic &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DWAssociationsPeriodic &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_DWAssociationsPeriodic_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataWriterPeriodicReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dw_id) &&
    (strm << _tao_aggregate.data_dropped_count) &&
    (strm << _tao_aggregate.data_delivered_count) &&
    (strm << _tao_aggregate.control_dropped_count) &&
    (strm << _tao_aggregate.control_delivered_count) &&
    (strm << _tao_aggregate.associations) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataWriterPeriodicReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dw_id) &&
    (strm >> _tao_aggregate.data_dropped_count) &&
    (strm >> _tao_aggregate.data_delivered_count) &&
    (strm >> _tao_aggregate.control_dropped_count) &&
    (strm >> _tao_aggregate.control_delivered_count) &&
    (strm >> _tao_aggregate.associations) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataReaderAssociation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dw_id) &&
    (strm << _tao_aggregate.state);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataReaderAssociation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dw_id) &&
    (strm >> _tao_aggregate.state);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_DRAssociations_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_DRAssociations_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DRAssociations &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DRAssociations &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_DRAssociations_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataReaderReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dp_id) &&
    (strm << _tao_aggregate.sub_handle) &&
    (strm << _tao_aggregate.dr_id) &&
    (strm << _tao_aggregate.topic_id) &&
    (strm << _tao_aggregate.instances) &&
    (strm << _tao_aggregate.associations) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataReaderReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dp_id) &&
    (strm >> _tao_aggregate.sub_handle) &&
    (strm >> _tao_aggregate.dr_id) &&
    (strm >> _tao_aggregate.topic_id) &&
    (strm >> _tao_aggregate.instances) &&
    (strm >> _tao_aggregate.associations) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataReaderAssociationPeriodic &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dw_id) &&
    (strm << _tao_aggregate.samples_available);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataReaderAssociationPeriodic &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dw_id) &&
    (strm >> _tao_aggregate.samples_available);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_DRAssociationsPeriodic_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_DRAssociationsPeriodic_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DRAssociationsPeriodic &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DRAssociationsPeriodic &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_DRAssociationsPeriodic_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::DataReaderPeriodicReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.dr_id) &&
    (strm << _tao_aggregate.associations) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::DataReaderPeriodicReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.dr_id) &&
    (strm >> _tao_aggregate.associations) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::TransportReport &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.host.in ()) &&
    (strm << _tao_aggregate.pid) &&
    (strm << _tao_aggregate.transport_id) &&
    (strm << _tao_aggregate.transport_type.in ()) &&
    (strm << _tao_aggregate.values);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::TransportReport &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.host.out ()) &&
    (strm >> _tao_aggregate.pid) &&
    (strm >> _tao_aggregate.transport_id) &&
    (strm >> _tao_aggregate.transport_type.out ()) &&
    (strm >> _tao_aggregate.values);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OpenDDS::DCPS::ReportType _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OpenDDS::DCPS::ReportType & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OpenDDS::DCPS::ReportType> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_union/cdr_op_cs.cpp:77


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::GenericReport &_tao_union
  )
{
  if ( !(strm << _tao_union._d ()) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_union._d ())
  {
    case OpenDDS::DCPS::SERVICE_PARTICIPANT_REPORT_TYPE:
      {
        result = strm << _tao_union.sp_report ();
      }
      break;
    case OpenDDS::DCPS::DOMAIN_PARTICIPANT_REPORT_TYPE:
      {
        result = strm << _tao_union.dp_report ();
      }
      break;
    case OpenDDS::DCPS::TOPIC_REPORT_TYPE:
      {
        result = strm << _tao_union.topic_report ();
      }
      break;
    case OpenDDS::DCPS::PUBLISHER_REPORT_TYPE:
      {
        result = strm << _tao_union.publisher_report ();
      }
      break;
    case OpenDDS::DCPS::SUBSCRIBER_REPORT_TYPE:
      {
        result = strm << _tao_union.subscriber_report ();
      }
      break;
    case OpenDDS::DCPS::DATA_WRITER_REPORT_TYPE:
      {
        result = strm << _tao_union.dw_report ();
      }
      break;
    case OpenDDS::DCPS::DATA_WRITER_PERIODIC_REPORT_TYPE:
      {
        result = strm << _tao_union.dw_per_report ();
      }
      break;
    case OpenDDS::DCPS::DATA_READER_REPORT_TYPE:
      {
        result = strm << _tao_union.dr_report ();
      }
      break;
    case OpenDDS::DCPS::DATA_READER_PERIODIC_REPORT_TYPE:
      {
        result = strm << _tao_union.dr_per_report ();
      }
      break;
    case OpenDDS::DCPS::TRANSPORT_REPORT_TYPE:
      {
        result = strm << _tao_union.transport_report ();
      }
      break;
    default:
      break;
  }

  return result;
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::GenericReport &_tao_union
  )
{
  OpenDDS::DCPS::ReportType _tao_discriminant;
  if ( !(strm >> _tao_discriminant) )
    {
      return false;
    }
  
  ::CORBA::Boolean result = true;

  switch (_tao_discriminant)
  {
    case OpenDDS::DCPS::SERVICE_PARTICIPANT_REPORT_TYPE:
      {
        OpenDDS::DCPS::ServiceParticipantReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.sp_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DOMAIN_PARTICIPANT_REPORT_TYPE:
      {
        OpenDDS::DCPS::DomainParticipantReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dp_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::TOPIC_REPORT_TYPE:
      {
        OpenDDS::DCPS::TopicReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.topic_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::PUBLISHER_REPORT_TYPE:
      {
        OpenDDS::DCPS::PublisherReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.publisher_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::SUBSCRIBER_REPORT_TYPE:
      {
        OpenDDS::DCPS::SubscriberReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.subscriber_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DATA_WRITER_REPORT_TYPE:
      {
        OpenDDS::DCPS::DataWriterReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dw_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DATA_WRITER_PERIODIC_REPORT_TYPE:
      {
        OpenDDS::DCPS::DataWriterPeriodicReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dw_per_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DATA_READER_REPORT_TYPE:
      {
        OpenDDS::DCPS::DataReaderReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dr_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::DATA_READER_PERIODIC_REPORT_TYPE:
      {
        OpenDDS::DCPS::DataReaderPeriodicReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.dr_per_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    case OpenDDS::DCPS::TRANSPORT_REPORT_TYPE:
      {
        OpenDDS::DCPS::TransportReport _tao_union_tmp;
        result = strm >> _tao_union_tmp;

        if (result)
          {
            _tao_union.transport_report (_tao_union_tmp);
            _tao_union._d (_tao_discriminant);
          }
      }
      break;
    default:
      _tao_union._default ();
      // For maximum interop compatability, force the same value as transmitted
      _tao_union._d (_tao_discriminant);
      break;
  }

  return result;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_interface/cdr_op_cs.cpp:54

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::ProcessMonitor_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::ProcessMonitor_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;

  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::OpenDDS::DCPS::ProcessMonitor RHS_SCOPED_NAME;

  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (obj.in ());
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



