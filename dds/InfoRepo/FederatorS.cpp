// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/


// TAO_IDL - Generated from
// be/be_codegen.cpp:652

#include "DcpsInfo_pch.h"
#ifndef _TAO_IDL_FEDERATORS_UOGKGX_CPP_
#define _TAO_IDL_FEDERATORS_UOGKGX_CPP_


#include "FederatorS.h"
#include "tao/PortableServer/Operation_Table_Perfect_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

// TAO_IDL - Generated from
// be/be_interface.cpp:1868

class TAO_OpenDDS_Federator_Manager_Perfect_Hash_OpTable
  : public TAO_Perfect_Hash_OpTable
{
private:
  unsigned int hash (const char *str, unsigned int len);

public:
  const TAO_operation_db_entry * lookup (const char *str, unsigned int len);
};

/* C++ code produced by gperf version 2.8 (ACE version) */
/* Command-line: /home/borotech/Development/ACE_wrappers/bin/ace_gperf -m -M -J -c -C -D -E -T -f 0 -F 0,0 -a -o -t -p -K opname -L C++ -Z TAO_OpenDDS_Federator_Manager_Perfect_Hash_OpTable -N lookup  */
unsigned int
TAO_OpenDDS_Federator_Manager_Perfect_Hash_OpTable::hash (const char *str, unsigned int len)
{
  static const unsigned char asso_values[] =
    {
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36, 36, 36, 36, 36, 36,
     36, 36, 36, 36, 36,  0, 36,  0, 36, 15,
      0, 25,  0, 36, 36,  0, 10, 36,  0, 36,
      0, 36, 36, 36,  0,  0, 10, 36, 36, 36,
     36,  0, 36, 36, 36, 36, 36, 36,
    };
  return len + asso_values[(int) str[len - 1]] + asso_values[(int) str[0]];
}

const TAO_operation_db_entry *
TAO_OpenDDS_Federator_Manager_Perfect_Hash_OpTable::lookup (const char *str, unsigned int len)
{
  enum
    {
      TOTAL_KEYWORDS = 17,
      MIN_WORD_LENGTH = 5,
      MAX_WORD_LENGTH = 22,
      MIN_HASH_VALUE = 5,
      MAX_HASH_VALUE = 35,
      HASH_VALUE_RANGE = 31,
      DUPLICATES = 0,
      WORDLIST_SIZE = 22
    };

  static const TAO_operation_db_entry wordlist[] =
    {
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"_is_a", &TAO_ServantBase::_is_a_thru_poa_skel, 0},
      {"",0,0},{"",0,0},
      {"shutdown", &POA_OpenDDS::Federator::Manager::shutdown_skel, 0},
      {"",0,0},
      {"repository", &POA_OpenDDS::Federator::Manager::repository_skel, 0},
      {"",0,0},{"",0,0},
      {"federation_id", &POA_OpenDDS::Federator::Manager::federation_id_skel, 0},
      {"_repository_id", &TAO_ServantBase::_repository_id_thru_poa_skel, 0},
      {"initializeOwner", &POA_OpenDDS::Federator::Manager::initializeOwner_skel, 0},
      {"leave_federation", &POA_OpenDDS::Federator::Manager::leave_federation_skel, 0},
      {"",0,0},
      {"leave_and_shutdown", &POA_OpenDDS::Federator::Manager::leave_and_shutdown_skel, 0},
      {"discover_federation", &POA_OpenDDS::Federator::Manager::discover_federation_skel, 0},
      {"_component", &TAO_ServantBase::_component_thru_poa_skel, 0},
      {"initializePublication", &POA_OpenDDS::Federator::Manager::initializePublication_skel, 0},
      {"initializeSubscription", &POA_OpenDDS::Federator::Manager::initializeSubscription_skel, 0},
      {"_non_existent", &TAO_ServantBase::_non_existent_thru_poa_skel, 0},
      {"",0,0},
      {"join_federation", &POA_OpenDDS::Federator::Manager::join_federation_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},{"",0,0},
      {"initializeTopic", &POA_OpenDDS::Federator::Manager::initializeTopic_skel, 0},
      {"initializeParticipant", &POA_OpenDDS::Federator::Manager::initializeParticipant_skel, 0},
      {"",0,0},{"",0,0},{"",0,0},
      {"_interface", &TAO_ServantBase::_interface_skel, 0},
    };

  if (len <= MAX_WORD_LENGTH && len >= MIN_WORD_LENGTH)
    {
      unsigned int key = hash (str, len);

      if (key <= MAX_HASH_VALUE && key >= MIN_HASH_VALUE)
        {
          const char *s = wordlist[key].opname;

          if (*str == *s && !ACE_OS::strncmp (str + 1, s + 1, len - 1))
            return &wordlist[key];
        }
    }
  return 0;
}

static TAO_OpenDDS_Federator_Manager_Perfect_Hash_OpTable tao_OpenDDS_Federator_Manager_optable;

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:93

POA_OpenDDS::Federator::Manager::Manager (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_OpenDDS_Federator_Manager_optable;
}

POA_OpenDDS::Federator::Manager::Manager (const Manager& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_OpenDDS::Federator::Manager::~Manager (void)
{
}

namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class discover_federation_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline discover_federation_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< char *>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< char *> (
            this->operation_details_,
            this->args_,
            1);
          
        retval =
          this->servant_->discover_federation (
            arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::discover_federation_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< char *>::in_arg_val _tao_ior;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_ior
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  discover_federation_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class join_federation_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline join_federation_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::Manager>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::Federator::Manager> (
            this->operation_details_,
            this->args_);
        
        TAO::SArg_Traits< ::OpenDDS::Federator::Manager>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::Manager> (
            this->operation_details_,
            this->args_,
            1);
          
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_2 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            2);
          
        retval =
          this->servant_->join_federation (
            arg_1
            , arg_2);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::join_federation_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::Federator::Manager>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::Manager>::in_arg_val _tao_peer;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_federation;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_peer,
      &_tao_federation
    };
  
  static size_t const nargs = 3;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  join_federation_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class leave_federation_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline leave_federation_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->leave_federation (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::leave_federation_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Long>::in_arg_val _tao_id;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_id
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  leave_federation_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class federation_id_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline federation_id_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::CORBA::Long>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::CORBA::Long> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->federation_id ();
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::federation_id_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::CORBA::Long>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  federation_id_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class repository_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline repository_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::DCPS::DCPSInfo>::ret_arg_type retval =
          TAO::Portable_Server::get_ret_arg< ::OpenDDS::DCPS::DCPSInfo> (
            this->operation_details_,
            this->args_);
        
        retval =
          this->servant_->repository ();
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::repository_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< ::OpenDDS::DCPS::DCPSInfo>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  repository_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class initializeOwner_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline initializeOwner_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::OwnerUpdate>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::OwnerUpdate> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->initializeOwner (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::initializeOwner_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::OwnerUpdate>::in_arg_val _tao_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_data
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  initializeOwner_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class initializeTopic_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline initializeTopic_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::TopicUpdate>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::TopicUpdate> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->initializeTopic (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::initializeTopic_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::TopicUpdate>::in_arg_val _tao_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_data
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  initializeTopic_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class initializeParticipant_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline initializeParticipant_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::ParticipantUpdate>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::ParticipantUpdate> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->initializeParticipant (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::initializeParticipant_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::ParticipantUpdate>::in_arg_val _tao_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_data
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  initializeParticipant_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class initializePublication_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline initializePublication_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::PublicationUpdate>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::PublicationUpdate> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->initializePublication (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::initializePublication_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::PublicationUpdate>::in_arg_val _tao_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_data
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  initializePublication_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class initializeSubscription_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline initializeSubscription_Manager (
        POA_OpenDDS::Federator::Manager * servant,
        TAO_Operation_Details const * operation_details,
        TAO::Argument * const args[])
        : servant_ (servant)
          , operation_details_ (operation_details)
          , args_ (args)
      {
      }

      virtual void execute (void)
      {
        TAO::SArg_Traits< ::OpenDDS::Federator::SubscriptionUpdate>::in_arg_type arg_1 =
          TAO::Portable_Server::get_in_arg< ::OpenDDS::Federator::SubscriptionUpdate> (
            this->operation_details_,
            this->args_,
            1);
          
        this->servant_->initializeSubscription (
          arg_1);
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
      TAO_Operation_Details const * const operation_details_;
      TAO::Argument * const * const args_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::initializeSubscription_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::OpenDDS::Federator::SubscriptionUpdate>::in_arg_val _tao_data;

  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_data
    };
  
  static size_t const nargs = 2;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  initializeSubscription_Manager command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class leave_and_shutdown_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline leave_and_shutdown_Manager (
        POA_OpenDDS::Federator::Manager * servant)
        : servant_ (servant)
      {
      }

      virtual void execute (void)
      {
        this->servant_->leave_and_shutdown ();
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::leave_and_shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  leave_and_shutdown_Manager command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}


namespace POA_OpenDDS
{
  
  namespace Federator
  {
    

    // TAO_IDL - Generated from
    // be/be_visitor_operation/upcall_command_ss.cpp:83

    class shutdown_Manager
      : public TAO::Upcall_Command
    {
    public:
      inline shutdown_Manager (
        POA_OpenDDS::Federator::Manager * servant)
        : servant_ (servant)
      {
      }

      virtual void execute (void)
      {
        this->servant_->shutdown ();
      }
    
    private:
      POA_OpenDDS::Federator::Manager * const servant_;
    };
  }
}

// TAO_IDL - Generated from
// be/be_visitor_operation/operation_ss.cpp:171

void POA_OpenDDS::Federator::Manager::shutdown_skel (
  TAO_ServerRequest & server_request,
  TAO::Portable_Server::Servant_Upcall *TAO_INTERCEPTOR (servant_upcall),
  TAO_ServantBase *servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */

  TAO::SArg_Traits< void>::ret_val retval;

  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;

  POA_OpenDDS::Federator::Manager * const impl =
    dynamic_cast<POA_OpenDDS::Federator::Manager *> (servant);

  if (!impl)
    {
      throw ::CORBA::INTERNAL ();
    }

  shutdown_Manager command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:166



::CORBA::Boolean POA_OpenDDS::Federator::Manager::_is_a (const char* value)
{
  return
    (
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/Federator/Manager:1.0"
        ) == 0 ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_OpenDDS::Federator::Manager::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/Federator/Manager:1.0";
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:426

void POA_OpenDDS::Federator::Manager::_dispatch (
  TAO_ServerRequest & req,
  TAO::Portable_Server::Servant_Upcall* servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_ss.cpp:373

OpenDDS::Federator::Manager *
POA_OpenDDS::Federator::Manager::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();

  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();

  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0);
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();

  typedef ::OpenDDS::Federator::Manager STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in ());
}

#endif /* ifndef */

