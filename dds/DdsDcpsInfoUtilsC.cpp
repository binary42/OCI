// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376

#include "DCPS/DdsDcps_pch.h"
#include "DdsDcpsInfoUtilsC.h"
#include "tao/CDR.h"
#include "tao/ORB_Core.h"

#if !defined (__ACE_INLINE__)
#include "DdsDcpsInfoUtilsC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_TRANSPORTLOCATORSEQ_CS_)
#define _OPENDDS_DCPS_TRANSPORTLOCATORSEQ_CS_

OpenDDS::DCPS::TransportLocatorSeq::TransportLocatorSeq (void)
{}

OpenDDS::DCPS::TransportLocatorSeq::TransportLocatorSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        TransportLocator
      > (max)
{}

OpenDDS::DCPS::TransportLocatorSeq::TransportLocatorSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::TransportLocator * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        TransportLocator
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::TransportLocatorSeq::TransportLocatorSeq (
    const TransportLocatorSeq &seq)
  : ::TAO::unbounded_value_sequence<
        TransportLocator
      > (seq)
{}

OpenDDS::DCPS::TransportLocatorSeq::~TransportLocatorSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_WRITERIDSEQ_CS_)
#define _OPENDDS_DCPS_WRITERIDSEQ_CS_

OpenDDS::DCPS::WriterIdSeq::WriterIdSeq (void)
{}

OpenDDS::DCPS::WriterIdSeq::WriterIdSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        RepoId
      > (max)
{}

OpenDDS::DCPS::WriterIdSeq::WriterIdSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::RepoId * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        RepoId
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::WriterIdSeq::WriterIdSeq (
    const WriterIdSeq &seq)
  : ::TAO::unbounded_value_sequence<
        RepoId
      > (seq)
{}

OpenDDS::DCPS::WriterIdSeq::~WriterIdSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_READERIDSEQ_CS_)
#define _OPENDDS_DCPS_READERIDSEQ_CS_

OpenDDS::DCPS::ReaderIdSeq::ReaderIdSeq (void)
{}

OpenDDS::DCPS::ReaderIdSeq::ReaderIdSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        RepoId
      > (max)
{}

OpenDDS::DCPS::ReaderIdSeq::ReaderIdSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::RepoId * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        RepoId
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::ReaderIdSeq::ReaderIdSeq (
    const ReaderIdSeq &seq)
  : ::TAO::unbounded_value_sequence<
        RepoId
      > (seq)
{}

OpenDDS::DCPS::ReaderIdSeq::~ReaderIdSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::TransportLocator &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.transport_type.in ()) &&
    (strm << _tao_aggregate.data);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::TransportLocator &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.transport_type.out ()) &&
    (strm >> _tao_aggregate.data);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_TransportLocatorSeq_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_TransportLocatorSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::TransportLocatorSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::TransportLocatorSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_TransportLocatorSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::IncompatibleQosStatus &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.total_count) &&
    (strm << _tao_aggregate.count_since_last_send) &&
    (strm << _tao_aggregate.last_policy_id) &&
    (strm << _tao_aggregate.policies);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::IncompatibleQosStatus &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.total_count) &&
    (strm >> _tao_aggregate.count_since_last_send) &&
    (strm >> _tao_aggregate.last_policy_id) &&
    (strm >> _tao_aggregate.policies);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::AddDomainStatus &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.id) &&
    (strm << ::ACE_OutputCDR::from_boolean (_tao_aggregate.federated));
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::AddDomainStatus &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.id) &&
    (strm >> ::ACE_InputCDR::to_boolean (_tao_aggregate.federated));
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_enum/cdr_op_cs.cpp:37


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, OpenDDS::DCPS::TopicStatus _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, OpenDDS::DCPS::TopicStatus & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<OpenDDS::DCPS::TopicStatus> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::WriterAssociation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.writerTransInfo) &&
    (strm << _tao_aggregate.writerId) &&
    (strm << _tao_aggregate.pubQos) &&
    (strm << _tao_aggregate.writerQos);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::WriterAssociation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.writerTransInfo) &&
    (strm >> _tao_aggregate.writerId) &&
    (strm >> _tao_aggregate.pubQos) &&
    (strm >> _tao_aggregate.writerQos);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::ReaderAssociation &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.readerTransInfo) &&
    (strm << _tao_aggregate.readerId) &&
    (strm << _tao_aggregate.subQos) &&
    (strm << _tao_aggregate.readerQos) &&
    (strm << _tao_aggregate.filterExpression.in ()) &&
    (strm << _tao_aggregate.exprParams);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::ReaderAssociation &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.readerTransInfo) &&
    (strm >> _tao_aggregate.readerId) &&
    (strm >> _tao_aggregate.subQos) &&
    (strm >> _tao_aggregate.readerQos) &&
    (strm >> _tao_aggregate.filterExpression.out ()) &&
    (strm >> _tao_aggregate.exprParams);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_WriterIdSeq_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_WriterIdSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::WriterIdSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::WriterIdSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_WriterIdSeq_CPP_ */

// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_ReaderIdSeq_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_ReaderIdSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::ReaderIdSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::ReaderIdSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_ReaderIdSeq_CPP_ */

