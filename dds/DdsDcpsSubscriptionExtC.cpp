// -*- C++ -*-
// $Id$

/**
 * Code generated by the The ACE ORB (TAO) IDL Compiler v2.2a_p7
 * TAO and the TAO IDL Compiler have been developed by:
 *       Center for Distributed Object Computing
 *       Washington University
 *       St. Louis, MO
 *       USA
 *       http://www.cs.wustl.edu/~schmidt/doc-center.html
 * and
 *       Distributed Object Computing Laboratory
 *       University of California at Irvine
 *       Irvine, CA
 *       USA
 * and
 *       Institute for Software Integrated Systems
 *       Vanderbilt University
 *       Nashville, TN
 *       USA
 *       http://www.isis.vanderbilt.edu/
 *
 * Information about TAO is available at:
 *     http://www.cs.wustl.edu/~schmidt/TAO.html
 **/

// TAO_IDL - Generated from
// be/be_codegen.cpp:376

#include "DCPS/DdsDcps_pch.h"
#include "DdsDcpsSubscriptionExtC.h"
#include "tao/CDR.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "DdsDcpsSubscriptionExtC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// be/be_visitor_sequence/sequence_cs.cpp:73

#if !defined (_OPENDDS_DCPS_LATENCYSTATISTICSSEQ_CS_)
#define _OPENDDS_DCPS_LATENCYSTATISTICSSEQ_CS_

OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (void)
{}

OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
    ::CORBA::ULong max)
  : ::TAO::unbounded_value_sequence<
        LatencyStatistics
      > (max)
{}

OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
    ::CORBA::ULong max,
    ::CORBA::ULong length,
    OpenDDS::DCPS::LatencyStatistics * buffer,
    ::CORBA::Boolean release
  )
  : ::TAO::unbounded_value_sequence<
        LatencyStatistics
      >
    (max, length, buffer, release)
{}

OpenDDS::DCPS::LatencyStatisticsSeq::LatencyStatisticsSeq (
    const LatencyStatisticsSeq &seq)
  : ::TAO::unbounded_value_sequence<
        LatencyStatistics
      > (seq)
{}

OpenDDS::DCPS::LatencyStatisticsSeq::~LatencyStatisticsSeq (void)
{}

#endif /* end #if !defined */

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for OpenDDS::DCPS::DataReaderListener.

OpenDDS::DCPS::DataReaderListener_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::duplicate (
    OpenDDS::DCPS::DataReaderListener_ptr p)
{
  return OpenDDS::DCPS::DataReaderListener::_duplicate (p);
}

void
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::release (
    OpenDDS::DCPS::DataReaderListener_ptr p)
{
  ::CORBA::release (p);
}

OpenDDS::DCPS::DataReaderListener_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::nil (void)
{
  return OpenDDS::DCPS::DataReaderListener::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderListener>::marshal (
    const OpenDDS::DCPS::DataReaderListener_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

OpenDDS::DCPS::DataReaderListener::DataReaderListener (void)
{}

OpenDDS::DCPS::DataReaderListener::~DataReaderListener (void)
{
}

OpenDDS::DCPS::DataReaderListener_ptr
OpenDDS::DCPS::DataReaderListener::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderListener::_duplicate (
      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataReaderListener_ptr
OpenDDS::DCPS::DataReaderListener::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderListener::_duplicate (
      dynamic_cast<DataReaderListener_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataReaderListener_ptr
OpenDDS::DCPS::DataReaderListener::_nil (void)
{
  return 0;
}

OpenDDS::DCPS::DataReaderListener_ptr
OpenDDS::DCPS::DataReaderListener::_duplicate (DataReaderListener_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OpenDDS::DCPS::DataReaderListener::_tao_release (DataReaderListener_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OpenDDS::DCPS::DataReaderListener::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Listener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReaderListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderListener:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OpenDDS::DCPS::DataReaderListener::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/DataReaderListener:1.0";
}

::CORBA::Boolean
OpenDDS::DCPS::DataReaderListener::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_interface/interface_cs.cpp:51

// Traits specializations for OpenDDS::DCPS::DataReaderEx.

OpenDDS::DCPS::DataReaderEx_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::duplicate (
    OpenDDS::DCPS::DataReaderEx_ptr p)
{
  return OpenDDS::DCPS::DataReaderEx::_duplicate (p);
}

void
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::release (
    OpenDDS::DCPS::DataReaderEx_ptr p)
{
  ::CORBA::release (p);
}

OpenDDS::DCPS::DataReaderEx_ptr
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::nil (void)
{
  return OpenDDS::DCPS::DataReaderEx::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<OpenDDS::DCPS::DataReaderEx>::marshal (
    const OpenDDS::DCPS::DataReaderEx_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

OpenDDS::DCPS::DataReaderEx::DataReaderEx (void)
{}

OpenDDS::DCPS::DataReaderEx::~DataReaderEx (void)
{
}

OpenDDS::DCPS::DataReaderEx_ptr
OpenDDS::DCPS::DataReaderEx::_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderEx::_duplicate (
      dynamic_cast<DataReaderEx_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataReaderEx_ptr
OpenDDS::DCPS::DataReaderEx::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref)
{
  return DataReaderEx::_duplicate (
      dynamic_cast<DataReaderEx_ptr> (_tao_objref)
    );
}

OpenDDS::DCPS::DataReaderEx_ptr
OpenDDS::DCPS::DataReaderEx::_nil (void)
{
  return 0;
}

OpenDDS::DCPS::DataReaderEx_ptr
OpenDDS::DCPS::DataReaderEx::_duplicate (DataReaderEx_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  return obj;
}

void
OpenDDS::DCPS::DataReaderEx::_tao_release (DataReaderEx_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
OpenDDS::DCPS::DataReaderEx::_is_a (const char *value)
{
  if (
      ACE_OS::strcmp (
          value,
          "IDL:DDS/Entity:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:DDS/DataReader:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:OpenDDS/DCPS/DataReaderEx:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/LocalObject:1.0"
        ) == 0 ||
      ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        ) == 0
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return false;
    }
}

const char* OpenDDS::DCPS::DataReaderEx::_interface_repository_id (void) const
{
  return "IDL:OpenDDS/DCPS/DataReaderEx:1.0";
}

::CORBA::Boolean
OpenDDS::DCPS::DataReaderEx::marshal (TAO_OutputCDR & /* cdr */)
{
  return false;
}

// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::SubscriptionLostStatus &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.publication_handles);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::SubscriptionLostStatus &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.publication_handles);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::BudgetExceededStatus &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.total_count) &&
    (strm << _tao_aggregate.total_count_change) &&
    (strm << _tao_aggregate.last_instance_handle);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::BudgetExceededStatus &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.total_count) &&
    (strm >> _tao_aggregate.total_count_change) &&
    (strm >> _tao_aggregate.last_instance_handle);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_structure/cdr_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::LatencyStatistics &_tao_aggregate)
{
  return
    (strm << _tao_aggregate.publication) &&
    (strm << _tao_aggregate.n) &&
    (strm << _tao_aggregate.maximum) &&
    (strm << _tao_aggregate.minimum) &&
    (strm << _tao_aggregate.mean) &&
    (strm << _tao_aggregate.variance);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::LatencyStatistics &_tao_aggregate)
{
  return
    (strm >> _tao_aggregate.publication) &&
    (strm >> _tao_aggregate.n) &&
    (strm >> _tao_aggregate.maximum) &&
    (strm >> _tao_aggregate.minimum) &&
    (strm >> _tao_aggregate.mean) &&
    (strm >> _tao_aggregate.variance);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// be/be_visitor_sequence/cdr_op_cs.cpp:96
#if !defined _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_
#define _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const OpenDDS::DCPS::LatencyStatisticsSeq &_tao_sequence)
{
  return TAO::marshal_sequence(strm, _tao_sequence);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    OpenDDS::DCPS::LatencyStatisticsSeq &_tao_sequence)
{
  return TAO::demarshal_sequence(strm, _tao_sequence);
}


TAO_END_VERSIONED_NAMESPACE_DECL

#endif /* _TAO_CDR_OP_OpenDDS_DCPS_LatencyStatisticsSeq_CPP_ */

