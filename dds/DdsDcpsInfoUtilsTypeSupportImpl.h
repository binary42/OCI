/* -*- C++ -*- */
/* Generated by ../bin/opendds_idl version 3.6 (ACE version 6.2a_p7) running on input file DdsDcpsInfoUtils.idl*/
#ifndef OPENDDS_IDL_GENERATED_DDSDCPSINFOUTILSTYPESUPPORTIMPL_H_XO29PN
#define OPENDDS_IDL_GENERATED_DDSDCPSINFOUTILSTYPESUPPORTIMPL_H_XO29PN
#include "dds/DCPS/Definitions.h"
#include "DdsDcpsInfoUtilsC.h"
#include "dds/DCPS/Serializer.h"
#include "dds/DdsDcpsGuidC.h"
#include "dds/DdsDcpsInfrastructureC.h"
#include "tao/OctetSeqC.h"
#include "dds/DCPS/dcps_export.h"


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: RepoId */


/* End TYPEDEF: RepoId */


/* Begin TYPEDEF: TransportBLOB */


/* End TYPEDEF: TransportBLOB */


/* Begin STRUCT: TransportLocator */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::TransportLocator& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::TransportLocator& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::TransportLocator& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

class MetaStruct;

template<typename T>
const MetaStruct& getMetaStruct();

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::TransportLocator>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::TransportLocator*);

}  }

#endif

/* End STRUCT: TransportLocator */


/* Begin TYPEDEF: TransportLocatorSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::TransportLocatorSeq& seq, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::TransportLocatorSeq& seq);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::TransportLocatorSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::TransportLocatorSeq*);

}  }

#endif

/* End TYPEDEF: TransportLocatorSeq */


/* Begin STRUCT: IncompatibleQosStatus */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::IncompatibleQosStatus& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::IncompatibleQosStatus& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::IncompatibleQosStatus& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::IncompatibleQosStatus>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::IncompatibleQosStatus*);

}  }

#endif

/* End STRUCT: IncompatibleQosStatus */


/* Begin STRUCT: AddDomainStatus */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::AddDomainStatus& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::AddDomainStatus& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::AddDomainStatus& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::AddDomainStatus>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::AddDomainStatus*);

}  }

#endif

/* End STRUCT: AddDomainStatus */


/* Begin ENUM: TopicStatus */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::TopicStatus& enumval);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::TopicStatus& enumval);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

extern const char* gen_OpenDDS_DCPS_TopicStatus_names[];
}  }

#endif

/* End ENUM: TopicStatus */


/* Begin STRUCT: WriterAssociation */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::WriterAssociation& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::WriterAssociation& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::WriterAssociation& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::WriterAssociation>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::WriterAssociation*);

}  }

#endif

/* End STRUCT: WriterAssociation */


/* Begin STRUCT: ReaderAssociation */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::ReaderAssociation& stru, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::ReaderAssociation& stru);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::ReaderAssociation& stru);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
OpenDDS_Dcps_Export
const MetaStruct& getMetaStruct<OpenDDS::DCPS::ReaderAssociation>();
OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::ReaderAssociation*);

}  }

#endif

/* End STRUCT: ReaderAssociation */


/* Begin TYPEDEF: WriterIdSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::WriterIdSeq& seq, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::WriterIdSeq& seq);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::WriterIdSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::WriterIdSeq*);

}  }

#endif

/* End TYPEDEF: WriterIdSeq */


/* Begin TYPEDEF: ReaderIdSeq */

namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_find_size(const OpenDDS::DCPS::ReaderIdSeq& seq, size_t& size, size_t& padding);

OpenDDS_Dcps_Export
bool operator<<(Serializer& strm, const OpenDDS::DCPS::ReaderIdSeq& seq);

OpenDDS_Dcps_Export
bool operator>>(Serializer& strm, OpenDDS::DCPS::ReaderIdSeq& seq);

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

OpenDDS_Dcps_Export
void gen_skip_over(Serializer& ser, OpenDDS::DCPS::ReaderIdSeq*);

}  }

#endif

/* End TYPEDEF: ReaderIdSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
#endif /* OPENDDS_IDL_GENERATED_DDSDCPSINFOUTILSTYPESUPPORTIMPL_H_XO29PN */
