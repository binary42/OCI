/* Generated by ../bin/opendds_idl version 3.6 (ACE version 6.2a_p7) running on input file DdsDcpsGuid.idl*/
#include "DCPS/DdsDcps_pch.h"
#include "DdsDcpsGuidTypeSupportImpl.h"

#include <cstring>
#include <stdexcept>
#include "dds/DCPS/FilterEvaluator.h"


/* Begin MODULE: OpenDDS */



/* Begin MODULE: DCPS */



/* Begin TYPEDEF: GuidVendorId_t */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::GuidVendorId_t_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 2 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::GuidVendorId_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in(), 2);
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::GuidVendorId_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out(), 2);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GuidVendorId_t_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(2, 1);
}

}  }

#endif

/* End TYPEDEF: GuidVendorId_t */


/* Begin TYPEDEF: GuidPrefix_t */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::GuidPrefix_t_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 12 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::GuidPrefix_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in(), 12);
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::GuidPrefix_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out(), 12);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GuidPrefix_t_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(12, 1);
}

}  }

#endif

/* End TYPEDEF: GuidPrefix_t */


/* Begin TYPEDEF: EntityKey_t */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::EntityKey_t_forany& arr, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(arr);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  size += 3 * max_marshaled_size_octet();
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::EntityKey_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.write_octet_array(arr.in(), 3);
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::EntityKey_t_forany& arr)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(arr);
  return strm.read_octet_array(arr.out(), 3);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::EntityKey_t_forany*)
{
  ACE_UNUSED_ARG(ser);
  ser.skip(3, 1);
}

}  }

#endif

/* End TYPEDEF: EntityKey_t */


/* Begin STRUCT: EntityId_t */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::EntityId_t& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  OpenDDS::DCPS::EntityKey_t_forany stru_entityKey(const_cast<OpenDDS::DCPS::EntityKey_t_slice*>(stru.entityKey));
  gen_find_size(stru_entityKey, size, padding);
  size += gen_max_marshaled_size(ACE_OutputCDR::from_octet(stru.entityKind));
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::EntityId_t& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  OpenDDS::DCPS::EntityKey_t_forany stru_entityKey(const_cast<OpenDDS::DCPS::EntityKey_t_slice*>(stru.entityKey));
  return (strm << stru_entityKey)
    && (strm << ACE_OutputCDR::from_octet(stru.entityKind));
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::EntityId_t& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  OpenDDS::DCPS::EntityKey_t_forany stru_entityKey(const_cast<OpenDDS::DCPS::EntityKey_t_slice*>(stru.entityKey));
  return (strm >> stru_entityKey)
    && (strm >> ACE_InputCDR::to_octet(stru.entityKind));
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::DCPS::EntityId_t> : MetaStruct {
  typedef OpenDDS::DCPS::EntityId_t T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::DCPS::EntityId_t& typed = *static_cast<const OpenDDS::DCPS::EntityId_t*>(stru);
    if (std::strcmp(field, "entityKind") == 0) {
      return typed.entityKind;
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::EntityId_t)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    gen_skip_over(ser, static_cast<OpenDDS::DCPS::EntityKey_t_forany*>(0));
    if (std::strcmp(field, "entityKind") == 0) {
      ACE_CDR::Octet val;
      if (!(ser >> ACE_InputCDR::to_octet(val))) {
        throw std::runtime_error("Field 'entityKind' could not be deserialized");
      }
      return val;
    } else {
      ser.skip(1, 1);
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + std::string(field) + " not valid for struct OpenDDS::DCPS::EntityId_t");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strcmp(field, "entityKind") == 0) {
      return make_field_cmp(&T::entityKind, next);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::EntityId_t)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"entityKey", "entityKind", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "entityKey") == 0) {
      return &static_cast<const T*>(stru)->entityKey;
    }
    if (std::strcmp(field, "entityKind") == 0) {
      return &static_cast<const T*>(stru)->entityKind;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::EntityId_t)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "entityKey") == 0) {
      OpenDDS::DCPS::EntityKey_t* lhsArr = &static_cast<T*>(lhs)->entityKey;
      const OpenDDS::DCPS::EntityKey_t* rhsArr = static_cast<const OpenDDS::DCPS::EntityKey_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 3; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "entityKind") == 0) {
      static_cast<T*>(lhs)->entityKind = *static_cast<const CORBA::Octet*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::EntityId_t)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    if (std::strcmp(field, "entityKind") == 0) {
      return static_cast<const T*>(lhs)->entityKind == static_cast<const T*>(rhs)->entityKind;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::EntityId_t)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::DCPS::EntityId_t>()
{
  static MetaStructImpl<OpenDDS::DCPS::EntityId_t> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::EntityId_t*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::DCPS::EntityId_t>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: EntityId_t */


/* Begin CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* End CONST: ENTITYKIND_BUILTIN_UNKNOWN */


/* Begin CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* End CONST: ENTITYKIND_BUILTIN_PARTICIPANT */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* End CONST: ENTITYKIND_BUILTIN_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_UNKNOWN */


/* End CONST: ENTITYKIND_USER_UNKNOWN */


/* Begin CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_WITH_KEY */


/* Begin CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* End CONST: ENTITYKIND_USER_WRITER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_NO_KEY */


/* End CONST: ENTITYKIND_USER_READER_NO_KEY */


/* Begin CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* End CONST: ENTITYKIND_USER_READER_WITH_KEY */


/* Begin CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* End CONST: ENTITYKIND_OPENDDS_SUBSCRIBER */


/* Begin CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* End CONST: ENTITYKIND_OPENDDS_PUBLISHER */


/* Begin CONST: ENTITYKIND_OPENDDS_TOPIC */


/* End CONST: ENTITYKIND_OPENDDS_TOPIC */


/* Begin CONST: ENTITYKIND_OPENDDS_USER */


/* End CONST: ENTITYKIND_OPENDDS_USER */


/* Begin CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* End CONST: ENTITYKIND_OPENDDS_NIL_WRITER */


/* Begin STRUCT: GUID_t */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::GUID_t& stru, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(stru);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  OpenDDS::DCPS::GuidPrefix_t_forany stru_guidPrefix(const_cast<OpenDDS::DCPS::GuidPrefix_t_slice*>(stru.guidPrefix));
  gen_find_size(stru_guidPrefix, size, padding);
  gen_find_size(stru.entityId, size, padding);
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::GUID_t& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  OpenDDS::DCPS::GuidPrefix_t_forany stru_guidPrefix(const_cast<OpenDDS::DCPS::GuidPrefix_t_slice*>(stru.guidPrefix));
  return (strm << stru_guidPrefix)
    && (strm << stru.entityId);
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::GUID_t& stru)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(stru);
  OpenDDS::DCPS::GuidPrefix_t_forany stru_guidPrefix(const_cast<OpenDDS::DCPS::GuidPrefix_t_slice*>(stru.guidPrefix));
  return (strm >> stru_guidPrefix)
    && (strm >> stru.entityId);
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

template<>
struct MetaStructImpl<OpenDDS::DCPS::GUID_t> : MetaStruct {
  typedef OpenDDS::DCPS::GUID_t T;

  void* allocate() const { return new T; }

  void deallocate(void* stru) const { delete static_cast<T*>(stru); }

  size_t numDcpsKeys() const { return 0; }

  Value getValue(const void* stru, const char* field) const
  {
    const OpenDDS::DCPS::GUID_t& typed = *static_cast<const OpenDDS::DCPS::GUID_t*>(stru);
    if (std::strncmp(field, "entityId.", 9) == 0) {
      return getMetaStruct<OpenDDS::DCPS::EntityId_t>().getValue(&typed.entityId, field + 9);
    }
    ACE_UNUSED_ARG(typed);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::GUID_t)");
  }

  Value getValue(Serializer& ser, const char* field) const
  {
    gen_skip_over(ser, static_cast<OpenDDS::DCPS::GuidPrefix_t_forany*>(0));
    if (std::strncmp(field, "entityId.", 9) == 0) {
      return getMetaStruct<OpenDDS::DCPS::EntityId_t>().getValue(ser, field + 9);
    } else {
      gen_skip_over(ser, static_cast<OpenDDS::DCPS::EntityId_t*>(0));
    }
    if (!field[0]) {
      return 0;
    }
    throw std::runtime_error("Field " + std::string(field) + " not valid for struct OpenDDS::DCPS::GUID_t");
  }

  ComparatorBase::Ptr create_qc_comparator(const char* field, ComparatorBase::Ptr next) const
  {
    ACE_UNUSED_ARG(next);
    if (std::strncmp(field, "entityId.", 9) == 0) {
      return make_struct_cmp(&T::entityId, getMetaStruct<OpenDDS::DCPS::EntityId_t>().create_qc_comparator(field + 9, 0), next);
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::GUID_t)");
  }

  const char** getFieldNames() const
  {
    static const char* names[] = {"guidPrefix", "entityId", 0};
    return names;
  }

  const void* getRawField(const void* stru, const char* field) const
  {
    if (std::strcmp(field, "guidPrefix") == 0) {
      return &static_cast<const T*>(stru)->guidPrefix;
    }
    if (std::strcmp(field, "entityId") == 0) {
      return &static_cast<const T*>(stru)->entityId;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::GUID_t)");
  }

  void assign(void* lhs, const char* field, const void* rhs,
    const char* rhsFieldSpec, const MetaStruct& rhsMeta) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    ACE_UNUSED_ARG(rhsFieldSpec);
    ACE_UNUSED_ARG(rhsMeta);
    if (std::strcmp(field, "guidPrefix") == 0) {
      OpenDDS::DCPS::GuidPrefix_t* lhsArr = &static_cast<T*>(lhs)->guidPrefix;
      const OpenDDS::DCPS::GuidPrefix_t* rhsArr = static_cast<const OpenDDS::DCPS::GuidPrefix_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      for (CORBA::ULong i0 = 0; i0 < 12; ++i0) {
        (*lhsArr)[i0] = (*rhsArr)[i0];
      }
      return;
    }
    if (std::strcmp(field, "entityId") == 0) {
      static_cast<T*>(lhs)->entityId = *static_cast<const OpenDDS::DCPS::EntityId_t*>(rhsMeta.getRawField(rhs, rhsFieldSpec));
      return;
    }
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::GUID_t)");
  }

  bool compare(const void* lhs, const void* rhs, const char* field) const
  {
    ACE_UNUSED_ARG(lhs);
    ACE_UNUSED_ARG(field);
    ACE_UNUSED_ARG(rhs);
    throw std::runtime_error("Field " + std::string(field) + " not found or its type is not supported (in struct OpenDDS::DCPS::GUID_t)");
  }
};

template<>
const MetaStruct& getMetaStruct<OpenDDS::DCPS::GUID_t>()
{
  static MetaStructImpl<OpenDDS::DCPS::GUID_t> msi;
  return msi;
}

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GUID_t*)
{
  ACE_UNUSED_ARG(ser);
  MetaStructImpl<OpenDDS::DCPS::GUID_t>().getValue(ser, "");
}

}  }

#endif

/* End STRUCT: GUID_t */


/* Begin TYPEDEF: GUIDSeq */

namespace OpenDDS { namespace DCPS {

void gen_find_size(const OpenDDS::DCPS::GUIDSeq& seq, size_t& size, size_t& padding)
{
  ACE_UNUSED_ARG(seq);
  ACE_UNUSED_ARG(size);
  ACE_UNUSED_ARG(padding);
  find_size_ulong(size, padding);
  if (seq.length() == 0) {
    return;
  }
  for (CORBA::ULong i = 0; i < seq.length(); ++i) {
    gen_find_size(seq[i], size, padding);
  }
}

bool operator<<(Serializer& strm, const OpenDDS::DCPS::GUIDSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  const CORBA::ULong length = seq.length();
  if (!(strm << length)) {
    return false;
  }
  if (length == 0) {
    return true;
  }
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm << seq[i])) {
      return false;
    }
  }
  return true;
}

bool operator>>(Serializer& strm, OpenDDS::DCPS::GUIDSeq& seq)
{
  ACE_UNUSED_ARG(strm);
  ACE_UNUSED_ARG(seq);
  CORBA::ULong length;
  if (!(strm >> length)) {
    return false;
  }
  seq.length(length);
  for (CORBA::ULong i = 0; i < length; ++i) {
    if (!(strm >> seq[i])) {
      return false;
    }
  }
  return true;
}

}  }

#ifndef OPENDDS_NO_CONTENT_SUBSCRIPTION_PROFILE
namespace OpenDDS { namespace DCPS {

void gen_skip_over(Serializer& ser, OpenDDS::DCPS::GUIDSeq*)
{
  ACE_UNUSED_ARG(ser);
  ACE_CDR::ULong length;
  ser >> length;
  for (ACE_CDR::ULong i = 0; i < length; ++i) {
    gen_skip_over(ser, static_cast<OpenDDS::DCPS::GUID_t*>(0));
  }
}

}  }

#endif

/* End TYPEDEF: GUIDSeq */

/* End MODULE: DCPS */

/* End MODULE: OpenDDS */
